using System;
using System.Reflection;
using NLog;
using Sandbox.Game;
using Sandbox.Game.Multiplayer;
using Sandbox.Game.World;
using Torch;
using Torch.Managers.PatchManager;
using VRage;
using VRage.Game;
using VRage.Game.Entity;
using VRage.Network;
using VRage.ObjectBuilders;
using VRageMath;

namespace ExploitFixer.ExploitFixer.Patches
{
    [PatchShim]
    public static class RemoveItemsPatch
    {
        private static Logger logger_0 = LogManager.GetLogger("ExploitFixer");

        public static void Patch(PatchContext ctx)
        {
            try
            {
                MethodInfo[] methods = typeof(MyInventory).GetMethods(BindingFlags.Instance | BindingFlags.Public);
                MethodInfo methodInfo2 = Utilities.FindOverLoadMethod(methods, "RemoveItems", 6);
                if (methodInfo2 == null)
                {
                    throw new Exception("Failed to find patch method");
                }
                ctx.GetPattern((MethodBase)methodInfo2).Prefixes.Add(((RemoveItemsPatch)(object)typeof(RemoveItemsPatch).TypeHandle).GetMethod("Prefix", BindingFlags.Static | BindingFlags.NonPublic));
            }
            catch (Exception value)
            {
                LogManager.GetLogger("ExploitFixer").Error("Failed to patch RemoveItems!");
                LogManager.GetLogger("ExploitFixer").Error(value);
            }
        }

        private static bool Prefix(MyInventory __instance, uint itemId, MyFixedPoint? amount = null, bool sendEvent = true, bool spawn = false, MatrixD? spawnPos = null, Action<MyDefinitionId, MyEntity> itemSpawned = null)
        {
            MyPhysicalInventoryItem? inventoryItem = __instance.GetItemByID(itemId);
            MyPlayer player = MySession.Static.Players.TryGetPlayerBySteamId(MyEventContext.Current.Sender.Value, 0);
            if (!inventoryItem.HasValue | (amount == 0))
            {
                return true;
            }
            if (!spawn || !(inventoryItem.Value.Amount < amount))
            {
                return true;
            }
            MyFixedPoint? duplicateAmount = amount - inventoryItem.Value.Amount;
            PluginMain.AddCheater(MyEventContext.Current.Sender.Value, "Tried to duplicate items (could be false positive)");
            LogManager.GetLogger("ExploitFixer").Fatal(string.Format("{0}:{1} Tried to duplicate {2} {3} (Could be false positive).", player.DisplayName, MyEventContext.Current.Sender.Value, duplicateAmount, ((MyObjectBuilder_Base)inventoryItem.Value.Content).SubtypeName));
            return false;
        }
    }
}