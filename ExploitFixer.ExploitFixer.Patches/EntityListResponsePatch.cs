using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using NLog;
using Sandbox.Engine.Multiplayer;
using Sandbox.Game.Entities;
using Sandbox.Game.Entities.Cube;
using Sandbox.Game.Gui;
using Sandbox.Game.Multiplayer;
using Sandbox.Game.World;
using SpaceEngineers.Game.Entities.Blocks.SafeZone;
using Torch.Managers.PatchManager;
using VRage.Game;
using VRage.Game.Entity;
using VRage.Network;
using VRageMath;

namespace ExploitFixer.ExploitFixer.Patches
{
	[PatchShim]
	public static class EntityListResponsePatch
	{
		[CompilerGenerated]
		private sealed class Class6
		{
			public MySafeZoneBlock mySafeZoneBlock;

			public Action<List<MyEntityList.MyEntityListShortInfoItem>> action;

			internal bool FilterEntities(MyCubeGrid myCubeGrid)
			{
				return myCubeGrid.EntityId != mySafeZoneBlock.EntityId;
			}

			internal Action<List<MyEntityList.MyEntityListShortInfoItem>> GetAction(IMyEventOwner myEventOwner)
			{
				return action;
			}
		}

		public static Logger _log = LogManager.GetLogger("ExploitFixer");

		public static void Patch(PatchContext ctx)
		{
			var methodBase = typeof(MyGuiScreenSafeZoneFilter).GetMethod("EntityListRequest", BindingFlags.Static | BindingFlags.NonPublic);
			ctx.GetPattern(methodBase).Prefixes.Add(typeof(EntityListResponsePatch).GetMethod("EntityListRequestPrefix2", BindingFlags.Static | BindingFlags.Public));
		}

		public static bool EntityListRequestPrefix(MyEntityList.MyEntityTypeEnum selectedType)
		{
			ulong senderId = MyEventContext.Current.Sender.Value;
			MyPlayer player = MySession.Static.Players.TryGetPlayerBySteamId(senderId, out var fetchedPlayer) ? fetchedPlayer : null;

			if (player != null)
			{
				return MySession.Static.GetUserPromoteLevel(senderId) != MyPromoteLevel.None;
			}
			return false;
		}

		public static bool EntityListRequestPrefix2(MyEntityList.MyEntityTypeEnum selectedType)
		{
			Class6 class6 = new Class6();
			List<MyEntityList.MyEntityListShortInfoItem> list = new List<MyEntityList.MyEntityListShortInfoItem>();

			ulong senderId = MyEventContext.Current.Sender.Value;
			// MyPlayer player = MySession.Static.Players.TryGetPlayerBySteamId(senderId, out var fetchedPlayer) ? fetchedPlayer : null;
			MySession.Static.Players.TryGetPlayerBySteamId(senderId, out var player);

			if (player == null)
			{
				return false;
			}
			BoundingSphereD boundingSphere = new BoundingSphereD(player.GetPosition(), 500.0);
			class6.mySafeZoneBlock = MyEntities.GetEntitiesInSphere(ref boundingSphere).OfType<MySafeZoneBlock>().FirstOrDefault();
			if (class6.mySafeZoneBlock == null)
			{
				_log.Warn(player.DisplayName + " tried to get entity list without being near a safezone block, investigate!");
				return false;
			}
			if (!class6.mySafeZoneBlock.HasPlayerAccess(MySession.Static.LocalPlayerId, MyRelationsBetweenPlayerAndBlock.NoOwnership))
			{
				_log.Warn(player.DisplayName + " tried to get entity list without having access to a nearby safezone block, investigate!");
				return false;
			}
			if (class6.mySafeZoneBlock.Enabled)
			{
				List<MyCubeGrid> cubeGrids = MyEntities.GetEntitiesInSphere(ref boundingSphere).OfType<MyCubeGrid>().Where(class6.FilterEntities).ToList();
				foreach (MyCubeGrid cubeGrid in cubeGrids)
				{
					MyEntityList.MyEntityListShortInfoItem shortInfoItem = new MyEntityList.MyEntityListShortInfoItem
					{
						DisplayName = cubeGrid.DisplayName,
						EntityId = cubeGrid.EntityId
					};
					list.Add(shortInfoItem);
				}
				var methodInfo = typeof(MyGuiScreenSafeZoneFilter).GetMethod("EntityListResponse", BindingFlags.Static | BindingFlags.NonPublic);
				class6.action = (Action<List<MyEntityList.MyEntityListShortInfoItem>>)Delegate.CreateDelegate(typeof(Action<List<MyEntityList.MyEntityListShortInfoItem>>), null, methodInfo);
				MyMultiplayer.RaiseStaticEvent(class6.GetAction, list, MyEventContext.Current.Sender);
				return false;
			}
			_log.Warn(player.DisplayName + " tried to get entity list without being in a safezone, investigate!");
			return false;
		}
	}
}