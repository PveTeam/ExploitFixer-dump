using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using NLog;
using Sandbox.Engine.Multiplayer;
using Sandbox.Game.Entities;
using Sandbox.Game.Entities.Cube;
using Sandbox.Game.Gui;
using Sandbox.Game.Multiplayer;
using Sandbox.Game.World;
using SpaceEngineers.Game.Entities.Blocks.SafeZone;
using Torch.Managers.PatchManager;
using VRage.Game;
using VRage.Game.Entity;
using VRage.Game.ModAPI;
using VRage.Network;
using VRageMath;

namespace ExploitFixer.ExploitFixer.Patches
{
	[PatchShim]
	public static class EntityListResponsePatch
	{
		private sealed class EntityData
		{
			public MySafeZoneBlock MySafeZoneBlock { get; set; }

			public Action<List<MyEntityListShortInfoItem>> Action { get; set; }

			internal bool CheckEntityInSafeZone<T>(T entity)
			{
				return (GetEntityId((MyEntity)entity) != GetEntityId((MyEntity)MySafeZoneBlock));
			}

			internal static long GetEntityId(MyEntity entity)
			{
				return entity.EntityId;
			}
		}

		public static Logger Log = LogManager.GetLogger("EntityListResponsePatch");

		public static void Patch(PatchContext patchContext)
		{
			MethodInfo methodToBePatched = typeof(MyGuiScreenSafeZoneFilter).GetMethod("StaticMethodName", BindingFlags.Static | BindingFlags.NonPublic);
			patchContext.GetPattern(methodToBePatched).Prefixes.Add(typeof(EntityListResponsePatch).GetMethod("PrefixMethodName", BindingFlags.Static | BindingFlags.Public));
		}

		public static bool ValidateEntityRequest(MyEntityTypeEnum selectedType)
		{
			ulong senderId = MyEventContext.Current.Sender.Value;
			if (MySession.Static.Players.TryGetPlayerBySteamId(senderId, out MyPlayer player) && 
                MySession.Static.GetUserPromoteLevel(senderId) != MyPromoteLevel.None)
			{
				return true;
			}
			return false;
		}

		public static bool GetEntityListInSafeZone(MyEntityTypeEnum selectedType)
		{
			EntityData entityData = new EntityData();
			List<MyEntityListShortInfoItem> entityListShortInfo = new List<MyEntityListShortInfoItem>();
			ulong senderId = MyEventContext.Current.Sender.Value;

			if (!MySession.Static.Players.TryGetPlayerBySteamId(senderId, out MyPlayer player))
			{
				return false;
			}

			BoundingSphereD sphere = new BoundingSphereD(player.GetPosition(), 500.0);
			entityData.MySafeZoneBlock = MyEntities.GetEntitiesInSphere(ref sphere).OfType<MySafeZoneBlock>().FirstOrDefault();

			if (entityData.MySafeZoneBlock == null)
			{
				Log.Warn(player.DisplayName + " is not in a safe zone.");
				return false;
			}

			if (entityData.MySafeZoneBlock.HasPlayerAccess(MySession.Static.LocalPlayerId, MyRelationsBetweenPlayerAndBlock.Neutral))
			{
				if (entityData.MySafeZoneBlock.Enabled)
				{
					var cubeGridsInSafeZone = MyEntities.GetEntitiesInSphere(ref sphere).OfType<MyCubeGrid>()
						.Where(entityData.CheckEntityInSafeZone).ToList();

					foreach (var cubeGrid in cubeGridsInSafeZone)
					{
						MyEntityListShortInfoItem entityInfo = Activator.CreateInstance<MyEntityListShortInfoItem>();
						entityInfo.DisplayName = cubeGrid.DisplayName;
						entityInfo.EntityId = cubeGrid.EntityId;
						entityListShortInfo.Add(entityInfo);
					}

					MethodInfo raiseEventMethod = typeof(MyGuiScreenSafeZoneFilter)
						.GetMethod("StaticEventMethodName", BindingFlags.Static | BindingFlags.NonPublic);
					entityData.Action = (Action<List<MyEntityListShortInfoItem>>)Delegate.CreateDelegate(typeof(Action<List<MyEntityListShortInfoItem>>), raiseEventMethod);
					MyEventContext.Current.ContextSender = MyMultiplayer.Static;
					MyMultiplayer.RaiseStaticEvent(entityData.Action, entityListShortInfo, MyEventContext.Current.Sender);

					return false;
				}
				else
				{
					Log.Warn(player.DisplayName + " is in a safe zone that is not enabled.");
					return false;
				}
			}
			else
			{
				Log.Warn(player.DisplayName + " is in a safe zone that doesn't grant access.");
				return false;
			}
		}
	}
}