using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using NLog;
using Sandbox.Engine.Multiplayer;
using Sandbox.Game.Entities;
using Sandbox.Game.Entities.Cube;
using Sandbox.Game.Gui;
using Sandbox.Game.Multiplayer;
using Sandbox.Game.World;
using SpaceEngineers.Game.Entities.Blocks.SafeZone;
using Torch.Managers.PatchManager;
using VRage.Game;
using VRage.Game.Entity;
using VRage.Game.ModAPI;
using VRage.Network;
using VRageMath;

namespace ExploitFixer.ExploitFixer.Patches
{
	[PatchShim]
	public static class EntityListResponsePatch
	{
		[CompilerGenerated]
		private sealed class InternalClass
		{
			public MySafeZoneBlock SafeZoneBlock;

			public Action<List<MyEntityList.MyEntityListShortInfoItem>> Action;

			internal bool FilterEntities<T>(T entity)
			{
				return ((MyEntity) entity).EntityId != SafeZoneBlock.EntityId;
			}

			internal Action<List<MyEntityList.MyEntityListShortInfoItem>> GetAction<T>(T entity)
			{
				return Action;
			}
		}

		public static Logger Log = LogManager.GetLogger("ExploitFixer");

		public static void Patch(PatchContext ctx)
		{
			var methodBase = typeof(MyGuiScreenSafeZoneFilter).GetMethod("/ExploitFixer;component/exploitfixer/htogarswigbubddnyfagmxkrpgmla.xaml", BindingFlags.Static | BindingFlags.NonPublic);
			ctx.GetPattern(methodBase).Prefixes.Add(typeof(EntityListResponsePatch).GetMethod("EntityListRequestPrefix2", BindingFlags.Static | BindingFlags.Public));
		}

		public static bool EntityListRequestPrefix(MyEntityList.MyEntityTypeEnum selectedType)
		{
			ulong senderId = MyEventContext.Current.Sender.Value;
			MyPlayer player = MySession.Static.Players.TryGetPlayerBySteamId(senderId, out var fetchedPlayer) ? fetchedPlayer : null;

			if (player != null)
			{
				return MySession.Static.GetUserPromoteLevel(senderId) != MyPromoteLevel.None;
			}
			return false;
		}

		public static bool EntityListRequestPrefix2(MyEntityList.MyEntityTypeEnum selectedType)
		{
			InternalClass internalClass = new InternalClass();
			List<MyEntityList.MyEntityListShortInfoItem> list = new List<MyEntityList.MyEntityListShortInfoItem>();

			ulong senderId = MyEventContext.Current.Sender.Value;
			MyPlayer player = MySession.Static.Players.TryGetPlayerBySteamId(senderId, out var fetchedPlayer) ? fetchedPlayer : null;

			if (player == null)
			{
				return false;
			}
			BoundingSphereD boundingSphere = new BoundingSphereD(player.GetPosition(), 500.0);
			internalClass.SafeZoneBlock = MyEntities.GetEntitiesInSphere(ref boundingSphere).OfType<MySafeZoneBlock>().FirstOrDefault();
			if (internalClass.SafeZoneBlock == null)
			{
				Log.Warn(player.DisplayName + " tried to get entity list without being near a safezone block, investigate!");
				return false;
			}
			if (internalClass.SafeZoneBlock.HasPlayerAccess(MySession.Static.LocalPlayerId, MyRelationsBetweenPlayerAndBlock.NoOwnership))
			{
				if (internalClass.SafeZoneBlock.Enabled)
				{
					List<MyCubeGrid> cubeGrids = MyEntities.GetEntitiesInSphere(ref boundingSphere).OfType<MyCubeGrid>().Where(internalClass.FilterEntities).ToList();
					foreach (MyCubeGrid cubeGrid in cubeGrids)
					{
						MyEntityList.MyEntityListShortInfoItem shortInfoItem = new MyEntityList.MyEntityListShortInfoItem
						{
							DisplayName = cubeGrid.DisplayName,
							EntityId = cubeGrid.EntityId
						};
						list.Add(shortInfoItem);
					}
					var methodInfo = typeof(MyGuiScreenSafeZoneFilter).GetMethod("EntityListResponse", BindingFlags.Static | BindingFlags.NonPublic);
					internalClass.Action = (Action<List<MyEntityList.MyEntityListShortInfoItem>>)Delegate.CreateDelegate(typeof(Action<List<MyEntityList.MyEntityListShortInfoItem>>), null, methodInfo);
					MyMultiplayer.RaiseStaticEvent(internalClass.GetAction, list, MyEventContext.Current.Sender, null);
					return false;
				}
				Log.Warn(player.DisplayName + " tried to get entity list without having access to a nearby safezone block, investigate!");
				return false;
			}
			Log.Warn(player.DisplayName + " tried to get entity list without having access to a nearby safezone block, investigate!");
			return false;
		}
	}
}
