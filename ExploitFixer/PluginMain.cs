using System;
using System.IO;
using System.Windows.Controls;
using NLog;
using Torch;
using Torch.API;
using Torch.API.Managers;
using Torch.API.Plugins;
using Torch.API.Session;
using Torch.Session;

namespace ExploitFixer
{
	public class PluginMain : TorchPluginBase, ITorchPlugin, IWpfPlugin, IDisposable
	{
		public static readonly Logger Log = smethod_8();

		private static readonly string string_0 = global::_003CModule_003E.smethod_4<string>(1797861483);

		private ExploitFixerControl exploitFixerControl_0;

		private Persistent<ExplotFixerConfig> persistent_0;

		public ExplotFixerConfig Config => persistent_0?.Data;

		public UserControl GetControl()
		{
			return exploitFixerControl_0 ?? (exploitFixerControl_0 = new ExploitFixerControl(this));
		}

		public override void Init(ITorchBase torch)
		{
			method_2(torch);
			method_1<string, Exception, bool>();
			TorchSessionManager manager = smethod_1(smethod_0((TorchPluginBase)this)).GetManager<TorchSessionManager>();
			if (manager == null)
			{
				smethod_3(Log, global::_003CModule_003E.smethod_4<string>(-1986493943));
			}
			else
			{
				smethod_2(manager, (TorchSessionStateChangedDel)method_0);
			}
			Save();
		}

		private void method_0<T0, T1>(T1 gparam_0, T0 gparam_1)
		{
			if ((IntPtr)gparam_1 == (IntPtr)1)
			{
				smethod_4(Log, global::_003CModule_003E.smethod_5<string>(415820488));
			}
			else if ((IntPtr)gparam_1 == (IntPtr)2)
			{
				smethod_4(Log, global::_003CModule_003E.smethod_3<string>(1356341416));
			}
		}

		private void method_1<T0, T1, T2>()
		{
			//IL_0044: Expected O, but got I4
			T0 path = (T0)smethod_6(smethod_5((TorchPluginBase)this), string_0);
			try
			{
				persistent_0 = Persistent<ExplotFixerConfig>.Load((string)path);
			}
			catch (Exception value)
			{
				Log.Warn((T1)value);
			}
			T2 val = (T2)(persistent_0?.Data == null);
			if (val != null)
			{
				smethod_4(Log, global::_003CModule_003E.smethod_3<string>(1454416554));
				persistent_0 = new Persistent<ExplotFixerConfig>((string)path, new ExplotFixerConfig());
				persistent_0.Save();
			}
		}

		public void Save()
		{
			try
			{
				persistent_0.Save();
				smethod_4(Log, global::_003CModule_003E.smethod_6<string>(-1149507403));
			}
			catch (IOException exception_)
			{
				smethod_7(Log, (Exception)exception_, global::_003CModule_003E.smethod_3<string>(-94015853));
			}
		}

		void method_2(ITorchBase itorchBase_0)
		{
			base.Init(itorchBase_0);
		}

		static ITorchBase smethod_0(TorchPluginBase torchPluginBase_0)
		{
			return torchPluginBase_0.Torch;
		}

		static IDependencyManager smethod_1(ITorchBase itorchBase_0)
		{
			return itorchBase_0.Managers;
		}

		static void smethod_2(TorchSessionManager torchSessionManager_0, TorchSessionStateChangedDel torchSessionStateChangedDel_0)
		{
			torchSessionManager_0.SessionStateChanged += torchSessionStateChangedDel_0;
		}

		static void smethod_3(Logger logger_0, string string_1)
		{
			logger_0.Warn(string_1);
		}

		static void smethod_4(Logger logger_0, string string_1)
		{
			logger_0.Info(string_1);
		}

		static string smethod_5(TorchPluginBase torchPluginBase_0)
		{
			return torchPluginBase_0.StoragePath;
		}

		static string smethod_6(string string_1, string string_2)
		{
			return Path.Combine(string_1, string_2);
		}

		static void smethod_7(Logger logger_0, Exception exception_0, string string_1)
		{
			logger_0.Warn(exception_0, string_1);
		}

		static Logger smethod_8()
		{
			return LogManager.GetCurrentClassLogger();
		}
	}
}
