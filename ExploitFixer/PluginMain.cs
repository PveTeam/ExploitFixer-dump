using System;
using System.IO;
using System.Windows.Controls;
using NLog;
using Torch;
using Torch.API;
using Torch.API.Managers;
using Torch.API.Plugins;
using Torch.API.Session;

namespace ExploitFixer
{
	public class ExploitFixerPlugin : TorchPluginBase, ITorchPlugin, IWpfPlugin, IDisposable
	{
		public static readonly Logger PluginLogger = LogManager.GetCurrentClassLogger();

		private const string configFileName = "expfixer.cfg";

		private ExploitFixerControl control;

		private Persistent<ExploiterFixerConfig> persistentConfig;

		public ExploiterFixerConfig Config => persistentConfig?.Data;

		public UserControl GetControl()
		{
			return control ?? (control = new ExploitFixerControl(this));
		}

		public override void Init(ITorchBase torch)
		{
			base.Init(torch);
			LoadData();
			var sessionManager = torch.Managers.GetManager<TorchSessionManager>();
			if (sessionManager == null)
			{
				PluginLogger.Warn("SessionManager not found");
			}
			else
			{
				sessionManager.SessionStateChanged += OnSessionStateChanged;
			}
			Save();
		}

		private void OnSessionStateChanged(ITorchSession session, TorchSessionState state)
		{
			if (state == TorchSessionState.Loaded)
			{
				PluginLogger.Info("Session loaded");
			}
			else if (state == TorchSessionState.Unloading)
			{
				PluginLogger.Info("Session unloading");
			}
		}

		private void LoadData()
		{
			string path = Path.Combine(StoragePath, configFileName);
			try
			{
				persistentConfig = Persistent<ExploiterFixerConfig>.Load(path);
			}
			catch (Exception e)
			{
				PluginLogger.Warn(e);
			}
			
			if (persistentConfig?.Data == null)
			{
				PluginLogger.Info("Creating new config");
				persistentConfig = new Persistent<ExploiterFixerConfig>(path, new ExploiterFixerConfig());
				persistentConfig.Save();
			}
		}

		public void Save()
		{
			try
			{
				persistentConfig.Save();
				PluginLogger.Info("Config saved");
			}
			catch (IOException exception)
			{
				PluginLogger.Warn(exception, "Failed to save config");
			}
		}
	}
}