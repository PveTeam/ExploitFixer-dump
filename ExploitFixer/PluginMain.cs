using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Windows.Controls;
using NLog;
using Sandbox.Engine.Multiplayer;
using Torch;
using Torch.API;
using Torch.API.Managers;
using Torch.API.Plugins;
using Torch.API.Session;
using Torch.Session;
using VRage.Replication;

namespace ExploitFixer
{
	public class PluginMain : TorchPluginBase, ITorchPlugin, IWpfPlugin, IDisposable
	{
		public static readonly Logger Log = LogManager.GetCurrentClassLogger();

		private static readonly string configFileName = "ExplotFixerConfig.cfg";

		private ExploitFixerControl exploitFixerControl;

		private Persistent<ExplotFixerConfig> persistentConfig;

		public ExplotFixerConfig Config => persistentConfig?.Data;

		public UserControl GetControl()
		{
			return exploitFixerControl ?? (exploitFixerControl = new ExploitFixerControl(this));
		}

		public override void Init(ITorchBase torch)
		{
			base.Init(torch);
			LoadConfig();
			TorchSessionManager manager = torch.Managers.GetManager<TorchSessionManager>();
			if (manager == null)
			{
				Log.Warn("No session manager loaded!");
			}
			else
			{
				manager.SessionStateChanged += SessionStateChangedEventHandler;
			}
			Save();
		}

		private void SessionStateChangedEventHandler(ITorchSession session, TorchSessionState state)
		{
			switch (state)
			{
			case TorchSessionState.Loaded:
				Log.Info("Session Loaded!");
				break;
			case TorchSessionState.Unloading:
				Log.Info("Session Unloading!");
				break;
			}
		}

		private void LoadConfig()
		{
			string configFilePath = Path.Combine(StoragePath, configFileName);
			try
			{
				persistentConfig = Persistent<ExplotFixerConfig>.Load(configFilePath);
			}
			catch (Exception e)
			{
				Log.Warn(e);
			}
			if (persistentConfig?.Data == null)
			{
				Log.Info("Create Default Config, because none was found!");
				persistentConfig = new Persistent<ExplotFixerConfig>(configFilePath, new ExplotFixerConfig());
				persistentConfig.Save();
			}
		}

		public static void AddCheater(ulong steamid, string explanation)
		{
			LinkedList<ValidationFailedRecord> linkedList = (LinkedList<ValidationFailedRecord>) typeof(MyMultiplayerServerBase).GetField("LastValidationErrors", BindingFlags.Static | BindingFlags.NonPublic).GetValue(MyMultiplayerMinimalBase.Instance);
			ValidationFailedRecord record = new ValidationFailedRecord((uint)linkedList.Count, steamid, DateTime.Now, explanation);
			linkedList.AddLast(record);
		}

		public void Save()
		{
			try
			{
				persistentConfig.Save();
				Log.Info("Configuration Saved.");
			}
			catch (IOException e)
			{
				Log.Warn(e, "Configuration failed to save");
			}
		}
	}
}