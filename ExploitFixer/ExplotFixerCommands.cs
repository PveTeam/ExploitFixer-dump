using Torch.API.Plugins;
using Torch.Commands;
using Torch.Commands.Permissions;
using VRage.Game.ModAPI;

namespace ExploitFixer
{
	[Category("ExplotFixer")]
	public class ExplotFixerCommands : CommandModule
	{
		public PluginMain Plugin => (PluginMain)smethod_1(smethod_0((CommandModule)this));

		[Permission(/*Could not decode attribute arguments.*/)]
		[Command("test", "This is a Test Command.", null)]
		public void Test()
		{
			CommandContext commandContext_ = smethod_0((CommandModule)this);
			string string_ = global::_003CModule_003E.smethod_3<string>(907936353);
			IMyPlayer obj = smethod_2(smethod_0((CommandModule)this));
			smethod_5(commandContext_, smethod_4(string_, (obj != null) ? smethod_3((object)obj) : null), (string)null, (string)null);
		}

		[Permission(/*Could not decode attribute arguments.*/)]
		[Command("testWithCommands", "This is a Test Command.", null)]
		public void TestWithArgs(string foo, string bar = null)
		{
			smethod_5(smethod_0((CommandModule)this), smethod_6(global::_003CModule_003E.smethod_2<string>(-1636198606), foo, global::_003CModule_003E.smethod_4<string>(-667367042), bar), (string)null, (string)null);
		}

		static CommandContext smethod_0(CommandModule commandModule_0)
		{
			return commandModule_0.Context;
		}

		static ITorchPlugin smethod_1(CommandContext commandContext_0)
		{
			return commandContext_0.Plugin;
		}

		static IMyPlayer smethod_2(CommandContext commandContext_0)
		{
			return commandContext_0.Player;
		}

		static string smethod_3(object object_0)
		{
			return object_0.ToString();
		}

		static string smethod_4(string string_0, string string_1)
		{
			return string_0 + string_1;
		}

		static void smethod_5(CommandContext commandContext_0, string string_0, string string_1, string string_2)
		{
			commandContext_0.Respond(string_0, string_1, string_2);
		}

		static string smethod_6(string string_0, string string_1, string string_2, string string_3)
		{
			return string_0 + string_1 + string_2 + string_3;
		}
	}
}
